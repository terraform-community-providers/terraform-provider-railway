// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type Builder string

const (
	BuilderHeroku   Builder = "HEROKU"
	BuilderNixpacks Builder = "NIXPACKS"
	BuilderPaketo   Builder = "PAKETO"
	BuilderRailpack Builder = "RAILPACK"
)

// CustomDomain includes the GraphQL fields of CustomDomain requested by the fragment CustomDomain.
type CustomDomain struct {
	Id            string             `json:"id"`
	Domain        string             `json:"domain"`
	Status        CustomDomainStatus `json:"status"`
	EnvironmentId string             `json:"environmentId"`
	ServiceId     string             `json:"serviceId"`
	TargetPort    int                `json:"targetPort"`
}

// GetId returns CustomDomain.Id, and is useful for accessing the field via an interface.
func (v *CustomDomain) GetId() string { return v.Id }

// GetDomain returns CustomDomain.Domain, and is useful for accessing the field via an interface.
func (v *CustomDomain) GetDomain() string { return v.Domain }

// GetStatus returns CustomDomain.Status, and is useful for accessing the field via an interface.
func (v *CustomDomain) GetStatus() CustomDomainStatus { return v.Status }

// GetEnvironmentId returns CustomDomain.EnvironmentId, and is useful for accessing the field via an interface.
func (v *CustomDomain) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns CustomDomain.ServiceId, and is useful for accessing the field via an interface.
func (v *CustomDomain) GetServiceId() string { return v.ServiceId }

// GetTargetPort returns CustomDomain.TargetPort, and is useful for accessing the field via an interface.
func (v *CustomDomain) GetTargetPort() int { return v.TargetPort }

type CustomDomainCreateInput struct {
	Domain        string `json:"domain"`
	EnvironmentId string `json:"environmentId"`
	ProjectId     string `json:"projectId"`
	ServiceId     string `json:"serviceId"`
	TargetPort    int    `json:"targetPort"`
}

// GetDomain returns CustomDomainCreateInput.Domain, and is useful for accessing the field via an interface.
func (v *CustomDomainCreateInput) GetDomain() string { return v.Domain }

// GetEnvironmentId returns CustomDomainCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *CustomDomainCreateInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetProjectId returns CustomDomainCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *CustomDomainCreateInput) GetProjectId() string { return v.ProjectId }

// GetServiceId returns CustomDomainCreateInput.ServiceId, and is useful for accessing the field via an interface.
func (v *CustomDomainCreateInput) GetServiceId() string { return v.ServiceId }

// GetTargetPort returns CustomDomainCreateInput.TargetPort, and is useful for accessing the field via an interface.
func (v *CustomDomainCreateInput) GetTargetPort() int { return v.TargetPort }

// CustomDomainStatus includes the requested fields of the GraphQL type CustomDomainStatus.
type CustomDomainStatus struct {
	DnsRecords []CustomDomainStatusDnsRecordsDNSRecords `json:"dnsRecords"`
}

// GetDnsRecords returns CustomDomainStatus.DnsRecords, and is useful for accessing the field via an interface.
func (v *CustomDomainStatus) GetDnsRecords() []CustomDomainStatusDnsRecordsDNSRecords {
	return v.DnsRecords
}

// CustomDomainStatusDnsRecordsDNSRecords includes the requested fields of the GraphQL type DNSRecords.
type CustomDomainStatusDnsRecordsDNSRecords struct {
	Hostlabel     string `json:"hostlabel"`
	RequiredValue string `json:"requiredValue"`
	Zone          string `json:"zone"`
}

// GetHostlabel returns CustomDomainStatusDnsRecordsDNSRecords.Hostlabel, and is useful for accessing the field via an interface.
func (v *CustomDomainStatusDnsRecordsDNSRecords) GetHostlabel() string { return v.Hostlabel }

// GetRequiredValue returns CustomDomainStatusDnsRecordsDNSRecords.RequiredValue, and is useful for accessing the field via an interface.
func (v *CustomDomainStatusDnsRecordsDNSRecords) GetRequiredValue() string { return v.RequiredValue }

// GetZone returns CustomDomainStatusDnsRecordsDNSRecords.Zone, and is useful for accessing the field via an interface.
func (v *CustomDomainStatusDnsRecordsDNSRecords) GetZone() string { return v.Zone }

// DeploymentTrigger includes the GraphQL fields of DeploymentTrigger requested by the fragment DeploymentTrigger.
type DeploymentTrigger struct {
	Id            string `json:"id"`
	Provider      string `json:"provider"`
	Repository    string `json:"repository"`
	Branch        string `json:"branch"`
	CheckSuites   bool   `json:"checkSuites"`
	ProjectId     string `json:"projectId"`
	ServiceId     string `json:"serviceId"`
	EnvironmentId string `json:"environmentId"`
}

// GetId returns DeploymentTrigger.Id, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetId() string { return v.Id }

// GetProvider returns DeploymentTrigger.Provider, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetProvider() string { return v.Provider }

// GetRepository returns DeploymentTrigger.Repository, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetRepository() string { return v.Repository }

// GetBranch returns DeploymentTrigger.Branch, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetBranch() string { return v.Branch }

// GetCheckSuites returns DeploymentTrigger.CheckSuites, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetCheckSuites() bool { return v.CheckSuites }

// GetProjectId returns DeploymentTrigger.ProjectId, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetProjectId() string { return v.ProjectId }

// GetServiceId returns DeploymentTrigger.ServiceId, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetServiceId() string { return v.ServiceId }

// GetEnvironmentId returns DeploymentTrigger.EnvironmentId, and is useful for accessing the field via an interface.
func (v *DeploymentTrigger) GetEnvironmentId() string { return v.EnvironmentId }

type DeploymentTriggerCreateInput struct {
	Branch        string  `json:"branch"`
	CheckSuites   bool    `json:"checkSuites"`
	EnvironmentId string  `json:"environmentId"`
	ProjectId     string  `json:"projectId"`
	Provider      string  `json:"provider"`
	Repository    string  `json:"repository"`
	RootDirectory *string `json:"rootDirectory,omitempty"`
	ServiceId     string  `json:"serviceId"`
}

// GetBranch returns DeploymentTriggerCreateInput.Branch, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetBranch() string { return v.Branch }

// GetCheckSuites returns DeploymentTriggerCreateInput.CheckSuites, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetCheckSuites() bool { return v.CheckSuites }

// GetEnvironmentId returns DeploymentTriggerCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetProjectId returns DeploymentTriggerCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetProjectId() string { return v.ProjectId }

// GetProvider returns DeploymentTriggerCreateInput.Provider, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetProvider() string { return v.Provider }

// GetRepository returns DeploymentTriggerCreateInput.Repository, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetRepository() string { return v.Repository }

// GetRootDirectory returns DeploymentTriggerCreateInput.RootDirectory, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetRootDirectory() *string { return v.RootDirectory }

// GetServiceId returns DeploymentTriggerCreateInput.ServiceId, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerCreateInput) GetServiceId() string { return v.ServiceId }

type DeploymentTriggerUpdateInput struct {
	Branch        string  `json:"branch"`
	CheckSuites   bool    `json:"checkSuites"`
	Repository    string  `json:"repository"`
	RootDirectory *string `json:"rootDirectory,omitempty"`
}

// GetBranch returns DeploymentTriggerUpdateInput.Branch, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerUpdateInput) GetBranch() string { return v.Branch }

// GetCheckSuites returns DeploymentTriggerUpdateInput.CheckSuites, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerUpdateInput) GetCheckSuites() bool { return v.CheckSuites }

// GetRepository returns DeploymentTriggerUpdateInput.Repository, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerUpdateInput) GetRepository() string { return v.Repository }

// GetRootDirectory returns DeploymentTriggerUpdateInput.RootDirectory, and is useful for accessing the field via an interface.
func (v *DeploymentTriggerUpdateInput) GetRootDirectory() *string { return v.RootDirectory }

// Environment includes the GraphQL fields of Environment requested by the fragment Environment.
type Environment struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	ProjectId string `json:"projectId"`
}

// GetId returns Environment.Id, and is useful for accessing the field via an interface.
func (v *Environment) GetId() string { return v.Id }

// GetName returns Environment.Name, and is useful for accessing the field via an interface.
func (v *Environment) GetName() string { return v.Name }

// GetProjectId returns Environment.ProjectId, and is useful for accessing the field via an interface.
func (v *Environment) GetProjectId() string { return v.ProjectId }

type EnvironmentCreateInput struct {
	Ephemeral bool   `json:"ephemeral"`
	Name      string `json:"name"`
	ProjectId string `json:"projectId"`
	// When committing the changes immediately, skip any initial deployments.
	SkipInitialDeploys bool `json:"skipInitialDeploys"`
	// Create the environment with all of the services, volumes, configuration, and variables from this source environment.
	SourceEnvironmentId *string `json:"sourceEnvironmentId,omitempty"`
	// Stage the initial changes for the environment. If false (default), the changes will be committed immediately.
	StageInitialChanges bool `json:"stageInitialChanges"`
}

// GetEphemeral returns EnvironmentCreateInput.Ephemeral, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetEphemeral() bool { return v.Ephemeral }

// GetName returns EnvironmentCreateInput.Name, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetName() string { return v.Name }

// GetProjectId returns EnvironmentCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetProjectId() string { return v.ProjectId }

// GetSkipInitialDeploys returns EnvironmentCreateInput.SkipInitialDeploys, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetSkipInitialDeploys() bool { return v.SkipInitialDeploys }

// GetSourceEnvironmentId returns EnvironmentCreateInput.SourceEnvironmentId, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetSourceEnvironmentId() *string { return v.SourceEnvironmentId }

// GetStageInitialChanges returns EnvironmentCreateInput.StageInitialChanges, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetStageInitialChanges() bool { return v.StageInitialChanges }

// Project includes the GraphQL fields of Project requested by the fragment Project.
type Project struct {
	Id           string                                           `json:"id"`
	Name         string                                           `json:"name"`
	Description  string                                           `json:"description"`
	IsPublic     bool                                             `json:"isPublic"`
	PrDeploys    bool                                             `json:"prDeploys"`
	Team         *ProjectTeam                                     `json:"team"`
	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

// GetId returns Project.Id, and is useful for accessing the field via an interface.
func (v *Project) GetId() string { return v.Id }

// GetName returns Project.Name, and is useful for accessing the field via an interface.
func (v *Project) GetName() string { return v.Name }

// GetDescription returns Project.Description, and is useful for accessing the field via an interface.
func (v *Project) GetDescription() string { return v.Description }

// GetIsPublic returns Project.IsPublic, and is useful for accessing the field via an interface.
func (v *Project) GetIsPublic() bool { return v.IsPublic }

// GetPrDeploys returns Project.PrDeploys, and is useful for accessing the field via an interface.
func (v *Project) GetPrDeploys() bool { return v.PrDeploys }

// GetTeam returns Project.Team, and is useful for accessing the field via an interface.
func (v *Project) GetTeam() *ProjectTeam { return v.Team }

// GetEnvironments returns Project.Environments, and is useful for accessing the field via an interface.
func (v *Project) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Environments
}

type ProjectCreateInput struct {
	DefaultEnvironmentName string             `json:"defaultEnvironmentName"`
	Description            string             `json:"description"`
	IsPublic               bool               `json:"isPublic"`
	Name                   string             `json:"name"`
	Plugins                []string           `json:"plugins"`
	PrDeploys              bool               `json:"prDeploys"`
	Repo                   *ProjectCreateRepo `json:"repo"`
	Runtime                *PublicRuntime     `json:"runtime"`
	TeamId                 *string            `json:"teamId"`
}

// GetDefaultEnvironmentName returns ProjectCreateInput.DefaultEnvironmentName, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetDefaultEnvironmentName() string { return v.DefaultEnvironmentName }

// GetDescription returns ProjectCreateInput.Description, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetDescription() string { return v.Description }

// GetIsPublic returns ProjectCreateInput.IsPublic, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetIsPublic() bool { return v.IsPublic }

// GetName returns ProjectCreateInput.Name, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetName() string { return v.Name }

// GetPlugins returns ProjectCreateInput.Plugins, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetPlugins() []string { return v.Plugins }

// GetPrDeploys returns ProjectCreateInput.PrDeploys, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetPrDeploys() bool { return v.PrDeploys }

// GetRepo returns ProjectCreateInput.Repo, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetRepo() *ProjectCreateRepo { return v.Repo }

// GetRuntime returns ProjectCreateInput.Runtime, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetRuntime() *PublicRuntime { return v.Runtime }

// GetTeamId returns ProjectCreateInput.TeamId, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetTeamId() *string { return v.TeamId }

type ProjectCreateRepo struct {
	Branch       string `json:"branch"`
	FullRepoName string `json:"fullRepoName"`
}

// GetBranch returns ProjectCreateRepo.Branch, and is useful for accessing the field via an interface.
func (v *ProjectCreateRepo) GetBranch() string { return v.Branch }

// GetFullRepoName returns ProjectCreateRepo.FullRepoName, and is useful for accessing the field via an interface.
func (v *ProjectCreateRepo) GetFullRepoName() string { return v.FullRepoName }

// ProjectEnvironmentsProjectEnvironmentsConnection includes the requested fields of the GraphQL type ProjectEnvironmentsConnection.
type ProjectEnvironmentsProjectEnvironmentsConnection struct {
	Edges []ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge `json:"edges"`
}

// GetEdges returns ProjectEnvironmentsProjectEnvironmentsConnection.Edges, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnection) GetEdges() []ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge {
	return v.Edges
}

// ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge includes the requested fields of the GraphQL type ProjectEnvironmentsConnectionEdge.
type ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge struct {
	Node ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment `json:"node"`
}

// GetNode returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge.Node, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge) GetNode() ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment {
	return v.Node
}

// ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment includes the requested fields of the GraphQL type Environment.
type ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment) GetId() string {
	return v.Id
}

// GetName returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment) GetName() string {
	return v.Name
}

// GetCreatedAt returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// ProjectTeam includes the requested fields of the GraphQL type Team.
type ProjectTeam struct {
	Id string `json:"id"`
}

// GetId returns ProjectTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectTeam) GetId() string { return v.Id }

type ProjectUpdateInput struct {
	BaseEnvironmentId *string `json:"baseEnvironmentId,omitempty"`
	// Enable/disable pull request environments for PRs created by bots
	BotPrEnvironments bool   `json:"botPrEnvironments"`
	Description       string `json:"description"`
	IsPublic          bool   `json:"isPublic"`
	Name              string `json:"name"`
	PrDeploys         bool   `json:"prDeploys"`
	// Enable/disable copying volume data to PR environment from the base environment
	PrEnvCopyVolData bool `json:"prEnvCopyVolData"`
}

// GetBaseEnvironmentId returns ProjectUpdateInput.BaseEnvironmentId, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetBaseEnvironmentId() *string { return v.BaseEnvironmentId }

// GetBotPrEnvironments returns ProjectUpdateInput.BotPrEnvironments, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetBotPrEnvironments() bool { return v.BotPrEnvironments }

// GetDescription returns ProjectUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetDescription() string { return v.Description }

// GetIsPublic returns ProjectUpdateInput.IsPublic, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetIsPublic() bool { return v.IsPublic }

// GetName returns ProjectUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetName() string { return v.Name }

// GetPrDeploys returns ProjectUpdateInput.PrDeploys, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetPrDeploys() bool { return v.PrDeploys }

// GetPrEnvCopyVolData returns ProjectUpdateInput.PrEnvCopyVolData, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetPrEnvCopyVolData() bool { return v.PrEnvCopyVolData }

type PublicRuntime string

const (
	PublicRuntimeLegacy      PublicRuntime = "LEGACY"
	PublicRuntimeUnspecified PublicRuntime = "UNSPECIFIED"
	PublicRuntimeV2          PublicRuntime = "V2"
)

// Private Docker registry credentials. Only available for Pro plan deployments.
type RegistryCredentialsInput struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// GetPassword returns RegistryCredentialsInput.Password, and is useful for accessing the field via an interface.
func (v *RegistryCredentialsInput) GetPassword() string { return v.Password }

// GetUsername returns RegistryCredentialsInput.Username, and is useful for accessing the field via an interface.
func (v *RegistryCredentialsInput) GetUsername() string { return v.Username }

type RestartPolicyType string

const (
	RestartPolicyTypeAlways    RestartPolicyType = "ALWAYS"
	RestartPolicyTypeNever     RestartPolicyType = "NEVER"
	RestartPolicyTypeOnFailure RestartPolicyType = "ON_FAILURE"
)

// Service includes the GraphQL fields of Service requested by the fragment Service.
type Service struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	ProjectId string `json:"projectId"`
}

// GetId returns Service.Id, and is useful for accessing the field via an interface.
func (v *Service) GetId() string { return v.Id }

// GetName returns Service.Name, and is useful for accessing the field via an interface.
func (v *Service) GetName() string { return v.Name }

// GetProjectId returns Service.ProjectId, and is useful for accessing the field via an interface.
func (v *Service) GetProjectId() string { return v.ProjectId }

type ServiceConnectInput struct {
	// The branch to connect to. e.g. 'main'
	Branch *string `json:"branch,omitempty"`
	// Name of the Dockerhub or GHCR image to connect this service to.
	Image *string `json:"image,omitempty"`
	// The full name of the repo to connect to. e.g. 'railwayapp/starters'
	Repo *string `json:"repo,omitempty"`
}

// GetBranch returns ServiceConnectInput.Branch, and is useful for accessing the field via an interface.
func (v *ServiceConnectInput) GetBranch() *string { return v.Branch }

// GetImage returns ServiceConnectInput.Image, and is useful for accessing the field via an interface.
func (v *ServiceConnectInput) GetImage() *string { return v.Image }

// GetRepo returns ServiceConnectInput.Repo, and is useful for accessing the field via an interface.
func (v *ServiceConnectInput) GetRepo() *string { return v.Repo }

type ServiceCreateInput struct {
	Branch *string `json:"branch,omitempty"`
	// Environment ID. If the specified environment is a fork, the service will only
	// be created in it. Otherwise it will created in all environments that are not
	// forks of other environments
	EnvironmentId       *string                   `json:"environmentId,omitempty"`
	Icon                *string                   `json:"icon,omitempty"`
	Name                string                    `json:"name"`
	ProjectId           string                    `json:"projectId"`
	RegistryCredentials *RegistryCredentialsInput `json:"registryCredentials,omitempty"`
	Source              *ServiceSourceInput       `json:"source,omitempty"`
	TemplateServiceId   *string                   `json:"templateServiceId,omitempty"`
	Variables           map[string]interface{}    `json:"variables"`
}

// GetBranch returns ServiceCreateInput.Branch, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetBranch() *string { return v.Branch }

// GetEnvironmentId returns ServiceCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetEnvironmentId() *string { return v.EnvironmentId }

// GetIcon returns ServiceCreateInput.Icon, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetIcon() *string { return v.Icon }

// GetName returns ServiceCreateInput.Name, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetName() string { return v.Name }

// GetProjectId returns ServiceCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetProjectId() string { return v.ProjectId }

// GetRegistryCredentials returns ServiceCreateInput.RegistryCredentials, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetRegistryCredentials() *RegistryCredentialsInput {
	return v.RegistryCredentials
}

// GetSource returns ServiceCreateInput.Source, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetSource() *ServiceSourceInput { return v.Source }

// GetTemplateServiceId returns ServiceCreateInput.TemplateServiceId, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetTemplateServiceId() *string { return v.TemplateServiceId }

// GetVariables returns ServiceCreateInput.Variables, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetVariables() map[string]interface{} { return v.Variables }

// ServiceDomain includes the GraphQL fields of ServiceDomain requested by the fragment ServiceDomain.
type ServiceDomain struct {
	Id            string `json:"id"`
	Domain        string `json:"domain"`
	Suffix        string `json:"suffix"`
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
}

// GetId returns ServiceDomain.Id, and is useful for accessing the field via an interface.
func (v *ServiceDomain) GetId() string { return v.Id }

// GetDomain returns ServiceDomain.Domain, and is useful for accessing the field via an interface.
func (v *ServiceDomain) GetDomain() string { return v.Domain }

// GetSuffix returns ServiceDomain.Suffix, and is useful for accessing the field via an interface.
func (v *ServiceDomain) GetSuffix() string { return v.Suffix }

// GetEnvironmentId returns ServiceDomain.EnvironmentId, and is useful for accessing the field via an interface.
func (v *ServiceDomain) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns ServiceDomain.ServiceId, and is useful for accessing the field via an interface.
func (v *ServiceDomain) GetServiceId() string { return v.ServiceId }

type ServiceDomainCreateInput struct {
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
	TargetPort    *int   `json:"targetPort,omitempty"`
}

// GetEnvironmentId returns ServiceDomainCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *ServiceDomainCreateInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns ServiceDomainCreateInput.ServiceId, and is useful for accessing the field via an interface.
func (v *ServiceDomainCreateInput) GetServiceId() string { return v.ServiceId }

// GetTargetPort returns ServiceDomainCreateInput.TargetPort, and is useful for accessing the field via an interface.
func (v *ServiceDomainCreateInput) GetTargetPort() *int { return v.TargetPort }

type ServiceDomainUpdateInput struct {
	Domain          string `json:"domain"`
	EnvironmentId   string `json:"environmentId"`
	ServiceDomainId string `json:"serviceDomainId"`
	ServiceId       string `json:"serviceId"`
	TargetPort      int    `json:"targetPort"`
}

// GetDomain returns ServiceDomainUpdateInput.Domain, and is useful for accessing the field via an interface.
func (v *ServiceDomainUpdateInput) GetDomain() string { return v.Domain }

// GetEnvironmentId returns ServiceDomainUpdateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *ServiceDomainUpdateInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceDomainId returns ServiceDomainUpdateInput.ServiceDomainId, and is useful for accessing the field via an interface.
func (v *ServiceDomainUpdateInput) GetServiceDomainId() string { return v.ServiceDomainId }

// GetServiceId returns ServiceDomainUpdateInput.ServiceId, and is useful for accessing the field via an interface.
func (v *ServiceDomainUpdateInput) GetServiceId() string { return v.ServiceId }

// GetTargetPort returns ServiceDomainUpdateInput.TargetPort, and is useful for accessing the field via an interface.
func (v *ServiceDomainUpdateInput) GetTargetPort() int { return v.TargetPort }

type ServiceInstanceUpdateInput struct {
	BuildCommand            *string                   `json:"buildCommand,omitempty"`
	Builder                 *Builder                  `json:"builder,omitempty"`
	CronSchedule            *string                   `json:"cronSchedule"`
	HealthcheckPath         *string                   `json:"healthcheckPath,omitempty"`
	HealthcheckTimeout      *int                      `json:"healthcheckTimeout,omitempty"`
	MultiRegionConfig       *map[string]interface{}   `json:"multiRegionConfig,omitempty"`
	NixpacksPlan            *map[string]interface{}   `json:"nixpacksPlan,omitempty"`
	NumReplicas             int                       `json:"numReplicas"`
	PreDeployCommand        *[]string                 `json:"preDeployCommand,omitempty"`
	RailwayConfigFile       *string                   `json:"railwayConfigFile,omitempty"`
	Region                  string                    `json:"region"`
	RegistryCredentials     *RegistryCredentialsInput `json:"registryCredentials,omitempty"`
	RestartPolicyMaxRetries *int                      `json:"restartPolicyMaxRetries,omitempty"`
	RestartPolicyType       *RestartPolicyType        `json:"restartPolicyType,omitempty"`
	RootDirectory           *string                   `json:"rootDirectory,omitempty"`
	SleepApplication        *bool                     `json:"sleepApplication,omitempty"`
	Source                  *ServiceSourceInput       `json:"source,omitempty"`
	StartCommand            *string                   `json:"startCommand,omitempty"`
	WatchPatterns           *[]string                 `json:"watchPatterns,omitempty"`
}

// GetBuildCommand returns ServiceInstanceUpdateInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetBuildCommand() *string { return v.BuildCommand }

// GetBuilder returns ServiceInstanceUpdateInput.Builder, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetBuilder() *Builder { return v.Builder }

// GetCronSchedule returns ServiceInstanceUpdateInput.CronSchedule, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetCronSchedule() *string { return v.CronSchedule }

// GetHealthcheckPath returns ServiceInstanceUpdateInput.HealthcheckPath, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetHealthcheckPath() *string { return v.HealthcheckPath }

// GetHealthcheckTimeout returns ServiceInstanceUpdateInput.HealthcheckTimeout, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetHealthcheckTimeout() *int { return v.HealthcheckTimeout }

// GetMultiRegionConfig returns ServiceInstanceUpdateInput.MultiRegionConfig, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetMultiRegionConfig() *map[string]interface{} {
	return v.MultiRegionConfig
}

// GetNixpacksPlan returns ServiceInstanceUpdateInput.NixpacksPlan, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetNixpacksPlan() *map[string]interface{} { return v.NixpacksPlan }

// GetNumReplicas returns ServiceInstanceUpdateInput.NumReplicas, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetNumReplicas() int { return v.NumReplicas }

// GetPreDeployCommand returns ServiceInstanceUpdateInput.PreDeployCommand, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetPreDeployCommand() *[]string { return v.PreDeployCommand }

// GetRailwayConfigFile returns ServiceInstanceUpdateInput.RailwayConfigFile, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetRailwayConfigFile() *string { return v.RailwayConfigFile }

// GetRegion returns ServiceInstanceUpdateInput.Region, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetRegion() string { return v.Region }

// GetRegistryCredentials returns ServiceInstanceUpdateInput.RegistryCredentials, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetRegistryCredentials() *RegistryCredentialsInput {
	return v.RegistryCredentials
}

// GetRestartPolicyMaxRetries returns ServiceInstanceUpdateInput.RestartPolicyMaxRetries, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetRestartPolicyMaxRetries() *int {
	return v.RestartPolicyMaxRetries
}

// GetRestartPolicyType returns ServiceInstanceUpdateInput.RestartPolicyType, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetRestartPolicyType() *RestartPolicyType {
	return v.RestartPolicyType
}

// GetRootDirectory returns ServiceInstanceUpdateInput.RootDirectory, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetRootDirectory() *string { return v.RootDirectory }

// GetSleepApplication returns ServiceInstanceUpdateInput.SleepApplication, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetSleepApplication() *bool { return v.SleepApplication }

// GetSource returns ServiceInstanceUpdateInput.Source, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetSource() *ServiceSourceInput { return v.Source }

// GetStartCommand returns ServiceInstanceUpdateInput.StartCommand, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetStartCommand() *string { return v.StartCommand }

// GetWatchPatterns returns ServiceInstanceUpdateInput.WatchPatterns, and is useful for accessing the field via an interface.
func (v *ServiceInstanceUpdateInput) GetWatchPatterns() *[]string { return v.WatchPatterns }

type ServiceSourceInput struct {
	Image *string `json:"image,omitempty"`
	Repo  *string `json:"repo,omitempty"`
}

// GetImage returns ServiceSourceInput.Image, and is useful for accessing the field via an interface.
func (v *ServiceSourceInput) GetImage() *string { return v.Image }

// GetRepo returns ServiceSourceInput.Repo, and is useful for accessing the field via an interface.
func (v *ServiceSourceInput) GetRepo() *string { return v.Repo }

type ServiceUpdateInput struct {
	Icon string `json:"icon"`
	Name string `json:"name"`
}

// GetIcon returns ServiceUpdateInput.Icon, and is useful for accessing the field via an interface.
func (v *ServiceUpdateInput) GetIcon() string { return v.Icon }

// GetName returns ServiceUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *ServiceUpdateInput) GetName() string { return v.Name }

// TCPProxy includes the GraphQL fields of TCPProxy requested by the fragment TCPProxy.
type TCPProxy struct {
	Id              string `json:"id"`
	ApplicationPort int    `json:"applicationPort"`
	ProxyPort       int    `json:"proxyPort"`
	Domain          string `json:"domain"`
	EnvironmentId   string `json:"environmentId"`
	ServiceId       string `json:"serviceId"`
}

// GetId returns TCPProxy.Id, and is useful for accessing the field via an interface.
func (v *TCPProxy) GetId() string { return v.Id }

// GetApplicationPort returns TCPProxy.ApplicationPort, and is useful for accessing the field via an interface.
func (v *TCPProxy) GetApplicationPort() int { return v.ApplicationPort }

// GetProxyPort returns TCPProxy.ProxyPort, and is useful for accessing the field via an interface.
func (v *TCPProxy) GetProxyPort() int { return v.ProxyPort }

// GetDomain returns TCPProxy.Domain, and is useful for accessing the field via an interface.
func (v *TCPProxy) GetDomain() string { return v.Domain }

// GetEnvironmentId returns TCPProxy.EnvironmentId, and is useful for accessing the field via an interface.
func (v *TCPProxy) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns TCPProxy.ServiceId, and is useful for accessing the field via an interface.
func (v *TCPProxy) GetServiceId() string { return v.ServiceId }

type TCPProxyCreateInput struct {
	ApplicationPort int    `json:"applicationPort"`
	EnvironmentId   string `json:"environmentId"`
	ServiceId       string `json:"serviceId"`
}

// GetApplicationPort returns TCPProxyCreateInput.ApplicationPort, and is useful for accessing the field via an interface.
func (v *TCPProxyCreateInput) GetApplicationPort() int { return v.ApplicationPort }

// GetEnvironmentId returns TCPProxyCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *TCPProxyCreateInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns TCPProxyCreateInput.ServiceId, and is useful for accessing the field via an interface.
func (v *TCPProxyCreateInput) GetServiceId() string { return v.ServiceId }

type VariableCollectionUpsertInput struct {
	EnvironmentId string `json:"environmentId"`
	ProjectId     string `json:"projectId"`
	// When set to true, removes all existing variables before upserting the new collection.
	Replace   bool                   `json:"replace"`
	ServiceId *string                `json:"serviceId"`
	Variables map[string]interface{} `json:"variables"`
}

// GetEnvironmentId returns VariableCollectionUpsertInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *VariableCollectionUpsertInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetProjectId returns VariableCollectionUpsertInput.ProjectId, and is useful for accessing the field via an interface.
func (v *VariableCollectionUpsertInput) GetProjectId() string { return v.ProjectId }

// GetReplace returns VariableCollectionUpsertInput.Replace, and is useful for accessing the field via an interface.
func (v *VariableCollectionUpsertInput) GetReplace() bool { return v.Replace }

// GetServiceId returns VariableCollectionUpsertInput.ServiceId, and is useful for accessing the field via an interface.
func (v *VariableCollectionUpsertInput) GetServiceId() *string { return v.ServiceId }

// GetVariables returns VariableCollectionUpsertInput.Variables, and is useful for accessing the field via an interface.
func (v *VariableCollectionUpsertInput) GetVariables() map[string]interface{} { return v.Variables }

type VariableDeleteInput struct {
	EnvironmentId string  `json:"environmentId"`
	Name          string  `json:"name"`
	ProjectId     string  `json:"projectId"`
	ServiceId     *string `json:"serviceId"`
}

// GetEnvironmentId returns VariableDeleteInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetName returns VariableDeleteInput.Name, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetName() string { return v.Name }

// GetProjectId returns VariableDeleteInput.ProjectId, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetProjectId() string { return v.ProjectId }

// GetServiceId returns VariableDeleteInput.ServiceId, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetServiceId() *string { return v.ServiceId }

type VariableUpsertInput struct {
	EnvironmentId string  `json:"environmentId"`
	Name          string  `json:"name"`
	ProjectId     string  `json:"projectId"`
	ServiceId     *string `json:"serviceId"`
	Value         string  `json:"value"`
}

// GetEnvironmentId returns VariableUpsertInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetName returns VariableUpsertInput.Name, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetName() string { return v.Name }

// GetProjectId returns VariableUpsertInput.ProjectId, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetProjectId() string { return v.ProjectId }

// GetServiceId returns VariableUpsertInput.ServiceId, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetServiceId() *string { return v.ServiceId }

// GetValue returns VariableUpsertInput.Value, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetValue() string { return v.Value }

// Volume includes the GraphQL fields of Volume requested by the fragment Volume.
type Volume struct {
	Id              string                                               `json:"id"`
	Name            string                                               `json:"name"`
	VolumeInstances VolumeVolumeInstancesVolumeVolumeInstancesConnection `json:"volumeInstances"`
}

// GetId returns Volume.Id, and is useful for accessing the field via an interface.
func (v *Volume) GetId() string { return v.Id }

// GetName returns Volume.Name, and is useful for accessing the field via an interface.
func (v *Volume) GetName() string { return v.Name }

// GetVolumeInstances returns Volume.VolumeInstances, and is useful for accessing the field via an interface.
func (v *Volume) GetVolumeInstances() VolumeVolumeInstancesVolumeVolumeInstancesConnection {
	return v.VolumeInstances
}

type VolumeCreateInput struct {
	// The environment to deploy the volume instances into. If `null`, the volume
	// will not be deployed to any environment. `undefined` will deploy to all environments.
	EnvironmentId *string `json:"environmentId,omitempty"`
	// The path in the container to mount the volume to
	MountPath string `json:"mountPath"`
	// The project to create the volume in
	ProjectId string `json:"projectId"`
	// The service to attach the volume to. If not provided, the volume will be disconnected.
	ServiceId *string `json:"serviceId"`
}

// GetEnvironmentId returns VolumeCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *VolumeCreateInput) GetEnvironmentId() *string { return v.EnvironmentId }

// GetMountPath returns VolumeCreateInput.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeCreateInput) GetMountPath() string { return v.MountPath }

// GetProjectId returns VolumeCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *VolumeCreateInput) GetProjectId() string { return v.ProjectId }

// GetServiceId returns VolumeCreateInput.ServiceId, and is useful for accessing the field via an interface.
func (v *VolumeCreateInput) GetServiceId() *string { return v.ServiceId }

type VolumeInstanceType string

const (
	VolumeInstanceTypeCloud VolumeInstanceType = "CLOUD"
	VolumeInstanceTypeMetal VolumeInstanceType = "METAL"
)

type VolumeInstanceUpdateInput struct {
	// The mount path of the volume instance. If not provided, the mount path will not be updated.
	MountPath string `json:"mountPath"`
	// The service to attach the volume to. If not provided, the volume will be disconnected.
	ServiceId string `json:"serviceId"`
	// The state of the volume instance. If not provided, the state will not be updated.
	State *VolumeState `json:"state,omitempty"`
	// The type of the volume instance. If not provided, the type will not be updated.
	Type *VolumeInstanceType `json:"type,omitempty"`
}

// GetMountPath returns VolumeInstanceUpdateInput.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeInstanceUpdateInput) GetMountPath() string { return v.MountPath }

// GetServiceId returns VolumeInstanceUpdateInput.ServiceId, and is useful for accessing the field via an interface.
func (v *VolumeInstanceUpdateInput) GetServiceId() string { return v.ServiceId }

// GetState returns VolumeInstanceUpdateInput.State, and is useful for accessing the field via an interface.
func (v *VolumeInstanceUpdateInput) GetState() *VolumeState { return v.State }

// GetType returns VolumeInstanceUpdateInput.Type, and is useful for accessing the field via an interface.
func (v *VolumeInstanceUpdateInput) GetType() *VolumeInstanceType { return v.Type }

type VolumeState string

const (
	VolumeStateDeleted          VolumeState = "DELETED"
	VolumeStateDeleting         VolumeState = "DELETING"
	VolumeStateError            VolumeState = "ERROR"
	VolumeStateMigrating        VolumeState = "MIGRATING"
	VolumeStateMigrationPending VolumeState = "MIGRATION_PENDING"
	VolumeStateReady            VolumeState = "READY"
	VolumeStateUpdating         VolumeState = "UPDATING"
)

type VolumeUpdateInput struct {
	// The name of the volume
	Name string `json:"name"`
}

// GetName returns VolumeUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *VolumeUpdateInput) GetName() string { return v.Name }

// VolumeVolumeInstancesVolumeVolumeInstancesConnection includes the requested fields of the GraphQL type VolumeVolumeInstancesConnection.
type VolumeVolumeInstancesVolumeVolumeInstancesConnection struct {
	Edges []VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdge `json:"edges"`
}

// GetEdges returns VolumeVolumeInstancesVolumeVolumeInstancesConnection.Edges, and is useful for accessing the field via an interface.
func (v *VolumeVolumeInstancesVolumeVolumeInstancesConnection) GetEdges() []VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdge {
	return v.Edges
}

// VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdge includes the requested fields of the GraphQL type VolumeVolumeInstancesConnectionEdge.
type VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdge struct {
	Node VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance `json:"node"`
}

// GetNode returns VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdge.Node, and is useful for accessing the field via an interface.
func (v *VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdge) GetNode() VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance {
	return v.Node
}

// VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance includes the requested fields of the GraphQL type VolumeInstance.
type VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance struct {
	Id            string `json:"id"`
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
	MountPath     string `json:"mountPath"`
	SizeMB        int    `json:"sizeMB"`
}

// GetId returns VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance.Id, and is useful for accessing the field via an interface.
func (v *VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance) GetId() string {
	return v.Id
}

// GetEnvironmentId returns VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance.EnvironmentId, and is useful for accessing the field via an interface.
func (v *VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance) GetEnvironmentId() string {
	return v.EnvironmentId
}

// GetServiceId returns VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance.ServiceId, and is useful for accessing the field via an interface.
func (v *VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance) GetServiceId() string {
	return v.ServiceId
}

// GetMountPath returns VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance) GetMountPath() string {
	return v.MountPath
}

// GetSizeMB returns VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance.SizeMB, and is useful for accessing the field via an interface.
func (v *VolumeVolumeInstancesVolumeVolumeInstancesConnectionEdgesVolumeVolumeInstancesConnectionEdgeNodeVolumeInstance) GetSizeMB() int {
	return v.SizeMB
}

// __connectServiceInput is used internally by genqlient
type __connectServiceInput struct {
	Id    string              `json:"id"`
	Input ServiceConnectInput `json:"input"`
}

// GetId returns __connectServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__connectServiceInput) GetId() string { return v.Id }

// GetInput returns __connectServiceInput.Input, and is useful for accessing the field via an interface.
func (v *__connectServiceInput) GetInput() ServiceConnectInput { return v.Input }

// __createCustomDomainInput is used internally by genqlient
type __createCustomDomainInput struct {
	Input CustomDomainCreateInput `json:"input"`
}

// GetInput returns __createCustomDomainInput.Input, and is useful for accessing the field via an interface.
func (v *__createCustomDomainInput) GetInput() CustomDomainCreateInput { return v.Input }

// __createDeploymentTriggerInput is used internally by genqlient
type __createDeploymentTriggerInput struct {
	Input DeploymentTriggerCreateInput `json:"input"`
}

// GetInput returns __createDeploymentTriggerInput.Input, and is useful for accessing the field via an interface.
func (v *__createDeploymentTriggerInput) GetInput() DeploymentTriggerCreateInput { return v.Input }

// __createEnvironmentInput is used internally by genqlient
type __createEnvironmentInput struct {
	Input EnvironmentCreateInput `json:"input"`
}

// GetInput returns __createEnvironmentInput.Input, and is useful for accessing the field via an interface.
func (v *__createEnvironmentInput) GetInput() EnvironmentCreateInput { return v.Input }

// __createProjectInput is used internally by genqlient
type __createProjectInput struct {
	Input ProjectCreateInput `json:"input"`
}

// GetInput returns __createProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetInput() ProjectCreateInput { return v.Input }

// __createServiceDomainInput is used internally by genqlient
type __createServiceDomainInput struct {
	Input ServiceDomainCreateInput `json:"input"`
}

// GetInput returns __createServiceDomainInput.Input, and is useful for accessing the field via an interface.
func (v *__createServiceDomainInput) GetInput() ServiceDomainCreateInput { return v.Input }

// __createServiceInput is used internally by genqlient
type __createServiceInput struct {
	Input ServiceCreateInput `json:"input"`
}

// GetInput returns __createServiceInput.Input, and is useful for accessing the field via an interface.
func (v *__createServiceInput) GetInput() ServiceCreateInput { return v.Input }

// __createTcpProxyInput is used internally by genqlient
type __createTcpProxyInput struct {
	Input TCPProxyCreateInput `json:"input"`
}

// GetInput returns __createTcpProxyInput.Input, and is useful for accessing the field via an interface.
func (v *__createTcpProxyInput) GetInput() TCPProxyCreateInput { return v.Input }

// __createVolumeInput is used internally by genqlient
type __createVolumeInput struct {
	Input VolumeCreateInput `json:"input"`
}

// GetInput returns __createVolumeInput.Input, and is useful for accessing the field via an interface.
func (v *__createVolumeInput) GetInput() VolumeCreateInput { return v.Input }

// __deleteCustomDomainInput is used internally by genqlient
type __deleteCustomDomainInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteCustomDomainInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteCustomDomainInput) GetId() string { return v.Id }

// __deleteDeploymentTriggerInput is used internally by genqlient
type __deleteDeploymentTriggerInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDeploymentTriggerInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDeploymentTriggerInput) GetId() string { return v.Id }

// __deleteEnvironmentInput is used internally by genqlient
type __deleteEnvironmentInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteEnvironmentInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteEnvironmentInput) GetId() string { return v.Id }

// __deleteProjectInput is used internally by genqlient
type __deleteProjectInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetId() string { return v.Id }

// __deleteServiceDomainInput is used internally by genqlient
type __deleteServiceDomainInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteServiceDomainInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteServiceDomainInput) GetId() string { return v.Id }

// __deleteServiceInput is used internally by genqlient
type __deleteServiceInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteServiceInput) GetId() string { return v.Id }

// __deleteTcpProxyInput is used internally by genqlient
type __deleteTcpProxyInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteTcpProxyInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteTcpProxyInput) GetId() string { return v.Id }

// __deleteVariableInput is used internally by genqlient
type __deleteVariableInput struct {
	Input VariableDeleteInput `json:"input"`
}

// GetInput returns __deleteVariableInput.Input, and is useful for accessing the field via an interface.
func (v *__deleteVariableInput) GetInput() VariableDeleteInput { return v.Input }

// __deleteVolumeInput is used internally by genqlient
type __deleteVolumeInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteVolumeInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteVolumeInput) GetId() string { return v.Id }

// __disconnectServiceInput is used internally by genqlient
type __disconnectServiceInput struct {
	Id string `json:"id"`
}

// GetId returns __disconnectServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__disconnectServiceInput) GetId() string { return v.Id }

// __getCustomDomainInput is used internally by genqlient
type __getCustomDomainInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __getCustomDomainInput.Id, and is useful for accessing the field via an interface.
func (v *__getCustomDomainInput) GetId() string { return v.Id }

// GetProjectId returns __getCustomDomainInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getCustomDomainInput) GetProjectId() string { return v.ProjectId }

// __getEnvironmentInput is used internally by genqlient
type __getEnvironmentInput struct {
	Id string `json:"id"`
}

// GetId returns __getEnvironmentInput.Id, and is useful for accessing the field via an interface.
func (v *__getEnvironmentInput) GetId() string { return v.Id }

// __getEnvironmentsInput is used internally by genqlient
type __getEnvironmentsInput struct {
	ProjectId string `json:"projectId"`
}

// GetProjectId returns __getEnvironmentsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getEnvironmentsInput) GetProjectId() string { return v.ProjectId }

// __getProjectInput is used internally by genqlient
type __getProjectInput struct {
	Id string `json:"id"`
}

// GetId returns __getProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectInput) GetId() string { return v.Id }

// __getServiceInput is used internally by genqlient
type __getServiceInput struct {
	Id string `json:"id"`
}

// GetId returns __getServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__getServiceInput) GetId() string { return v.Id }

// __getServiceInstanceInput is used internally by genqlient
type __getServiceInstanceInput struct {
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
}

// GetEnvironmentId returns __getServiceInstanceInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__getServiceInstanceInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns __getServiceInstanceInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__getServiceInstanceInput) GetServiceId() string { return v.ServiceId }

// __getSharedVariablesInput is used internally by genqlient
type __getSharedVariablesInput struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
}

// GetProjectId returns __getSharedVariablesInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getSharedVariablesInput) GetProjectId() string { return v.ProjectId }

// GetEnvironmentId returns __getSharedVariablesInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__getSharedVariablesInput) GetEnvironmentId() string { return v.EnvironmentId }

// __getTcpProxyInput is used internally by genqlient
type __getTcpProxyInput struct {
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
}

// GetEnvironmentId returns __getTcpProxyInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__getTcpProxyInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns __getTcpProxyInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__getTcpProxyInput) GetServiceId() string { return v.ServiceId }

// __getVariablesInput is used internally by genqlient
type __getVariablesInput struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
}

// GetProjectId returns __getVariablesInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getVariablesInput) GetProjectId() string { return v.ProjectId }

// GetEnvironmentId returns __getVariablesInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__getVariablesInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns __getVariablesInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__getVariablesInput) GetServiceId() string { return v.ServiceId }

// __getVolumeInstancesInput is used internally by genqlient
type __getVolumeInstancesInput struct {
	Id string `json:"id"`
}

// GetId returns __getVolumeInstancesInput.Id, and is useful for accessing the field via an interface.
func (v *__getVolumeInstancesInput) GetId() string { return v.Id }

// __listDeploymentTriggersInput is used internally by genqlient
type __listDeploymentTriggersInput struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
}

// GetProjectId returns __listDeploymentTriggersInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__listDeploymentTriggersInput) GetProjectId() string { return v.ProjectId }

// GetEnvironmentId returns __listDeploymentTriggersInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__listDeploymentTriggersInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns __listDeploymentTriggersInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__listDeploymentTriggersInput) GetServiceId() string { return v.ServiceId }

// __listServiceDomainsInput is used internally by genqlient
type __listServiceDomainsInput struct {
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
	ProjectId     string `json:"projectId"`
}

// GetEnvironmentId returns __listServiceDomainsInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__listServiceDomainsInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns __listServiceDomainsInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__listServiceDomainsInput) GetServiceId() string { return v.ServiceId }

// GetProjectId returns __listServiceDomainsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__listServiceDomainsInput) GetProjectId() string { return v.ProjectId }

// __redeployServiceInstanceInput is used internally by genqlient
type __redeployServiceInstanceInput struct {
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
}

// GetEnvironmentId returns __redeployServiceInstanceInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__redeployServiceInstanceInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns __redeployServiceInstanceInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__redeployServiceInstanceInput) GetServiceId() string { return v.ServiceId }

// __updateDeploymentTriggerInput is used internally by genqlient
type __updateDeploymentTriggerInput struct {
	Id    string                       `json:"id"`
	Input DeploymentTriggerUpdateInput `json:"input"`
}

// GetId returns __updateDeploymentTriggerInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDeploymentTriggerInput) GetId() string { return v.Id }

// GetInput returns __updateDeploymentTriggerInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDeploymentTriggerInput) GetInput() DeploymentTriggerUpdateInput { return v.Input }

// __updateProjectInput is used internally by genqlient
type __updateProjectInput struct {
	Id    string             `json:"id"`
	Input ProjectUpdateInput `json:"input"`
}

// GetId returns __updateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetId() string { return v.Id }

// GetInput returns __updateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetInput() ProjectUpdateInput { return v.Input }

// __updateServiceDomainInput is used internally by genqlient
type __updateServiceDomainInput struct {
	Input ServiceDomainUpdateInput `json:"input"`
}

// GetInput returns __updateServiceDomainInput.Input, and is useful for accessing the field via an interface.
func (v *__updateServiceDomainInput) GetInput() ServiceDomainUpdateInput { return v.Input }

// __updateServiceInput is used internally by genqlient
type __updateServiceInput struct {
	Id    string             `json:"id"`
	Input ServiceUpdateInput `json:"input"`
}

// GetId returns __updateServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__updateServiceInput) GetId() string { return v.Id }

// GetInput returns __updateServiceInput.Input, and is useful for accessing the field via an interface.
func (v *__updateServiceInput) GetInput() ServiceUpdateInput { return v.Input }

// __updateServiceInstanceInput is used internally by genqlient
type __updateServiceInstanceInput struct {
	ServiceId string                     `json:"serviceId"`
	Input     ServiceInstanceUpdateInput `json:"input"`
}

// GetServiceId returns __updateServiceInstanceInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__updateServiceInstanceInput) GetServiceId() string { return v.ServiceId }

// GetInput returns __updateServiceInstanceInput.Input, and is useful for accessing the field via an interface.
func (v *__updateServiceInstanceInput) GetInput() ServiceInstanceUpdateInput { return v.Input }

// __updateVolumeInput is used internally by genqlient
type __updateVolumeInput struct {
	Id    string            `json:"id"`
	Input VolumeUpdateInput `json:"input"`
}

// GetId returns __updateVolumeInput.Id, and is useful for accessing the field via an interface.
func (v *__updateVolumeInput) GetId() string { return v.Id }

// GetInput returns __updateVolumeInput.Input, and is useful for accessing the field via an interface.
func (v *__updateVolumeInput) GetInput() VolumeUpdateInput { return v.Input }

// __updateVolumeInstanceInput is used internally by genqlient
type __updateVolumeInstanceInput struct {
	Id    string                    `json:"id"`
	Input VolumeInstanceUpdateInput `json:"input"`
}

// GetId returns __updateVolumeInstanceInput.Id, and is useful for accessing the field via an interface.
func (v *__updateVolumeInstanceInput) GetId() string { return v.Id }

// GetInput returns __updateVolumeInstanceInput.Input, and is useful for accessing the field via an interface.
func (v *__updateVolumeInstanceInput) GetInput() VolumeInstanceUpdateInput { return v.Input }

// __upsertVariableCollectionInput is used internally by genqlient
type __upsertVariableCollectionInput struct {
	Input VariableCollectionUpsertInput `json:"input"`
}

// GetInput returns __upsertVariableCollectionInput.Input, and is useful for accessing the field via an interface.
func (v *__upsertVariableCollectionInput) GetInput() VariableCollectionUpsertInput { return v.Input }

// __upsertVariableInput is used internally by genqlient
type __upsertVariableInput struct {
	Input VariableUpsertInput `json:"input"`
}

// GetInput returns __upsertVariableInput.Input, and is useful for accessing the field via an interface.
func (v *__upsertVariableInput) GetInput() VariableUpsertInput { return v.Input }

// connectServiceResponse is returned by connectService on success.
type connectServiceResponse struct {
	// Connect a service to a source
	ServiceConnect connectServiceServiceConnectService `json:"serviceConnect"`
}

// GetServiceConnect returns connectServiceResponse.ServiceConnect, and is useful for accessing the field via an interface.
func (v *connectServiceResponse) GetServiceConnect() connectServiceServiceConnectService {
	return v.ServiceConnect
}

// connectServiceServiceConnectService includes the requested fields of the GraphQL type Service.
type connectServiceServiceConnectService struct {
	Service `json:"-"`
}

// GetId returns connectServiceServiceConnectService.Id, and is useful for accessing the field via an interface.
func (v *connectServiceServiceConnectService) GetId() string { return v.Service.Id }

// GetName returns connectServiceServiceConnectService.Name, and is useful for accessing the field via an interface.
func (v *connectServiceServiceConnectService) GetName() string { return v.Service.Name }

// GetProjectId returns connectServiceServiceConnectService.ProjectId, and is useful for accessing the field via an interface.
func (v *connectServiceServiceConnectService) GetProjectId() string { return v.Service.ProjectId }

func (v *connectServiceServiceConnectService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*connectServiceServiceConnectService
		graphql.NoUnmarshalJSON
	}
	firstPass.connectServiceServiceConnectService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalconnectServiceServiceConnectService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *connectServiceServiceConnectService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *connectServiceServiceConnectService) __premarshalJSON() (*__premarshalconnectServiceServiceConnectService, error) {
	var retval __premarshalconnectServiceServiceConnectService

	retval.Id = v.Service.Id
	retval.Name = v.Service.Name
	retval.ProjectId = v.Service.ProjectId
	return &retval, nil
}

// createCustomDomainCustomDomainCreateCustomDomain includes the requested fields of the GraphQL type CustomDomain.
type createCustomDomainCustomDomainCreateCustomDomain struct {
	CustomDomain `json:"-"`
}

// GetId returns createCustomDomainCustomDomainCreateCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *createCustomDomainCustomDomainCreateCustomDomain) GetId() string { return v.CustomDomain.Id }

// GetDomain returns createCustomDomainCustomDomainCreateCustomDomain.Domain, and is useful for accessing the field via an interface.
func (v *createCustomDomainCustomDomainCreateCustomDomain) GetDomain() string {
	return v.CustomDomain.Domain
}

// GetStatus returns createCustomDomainCustomDomainCreateCustomDomain.Status, and is useful for accessing the field via an interface.
func (v *createCustomDomainCustomDomainCreateCustomDomain) GetStatus() CustomDomainStatus {
	return v.CustomDomain.Status
}

// GetEnvironmentId returns createCustomDomainCustomDomainCreateCustomDomain.EnvironmentId, and is useful for accessing the field via an interface.
func (v *createCustomDomainCustomDomainCreateCustomDomain) GetEnvironmentId() string {
	return v.CustomDomain.EnvironmentId
}

// GetServiceId returns createCustomDomainCustomDomainCreateCustomDomain.ServiceId, and is useful for accessing the field via an interface.
func (v *createCustomDomainCustomDomainCreateCustomDomain) GetServiceId() string {
	return v.CustomDomain.ServiceId
}

// GetTargetPort returns createCustomDomainCustomDomainCreateCustomDomain.TargetPort, and is useful for accessing the field via an interface.
func (v *createCustomDomainCustomDomainCreateCustomDomain) GetTargetPort() int {
	return v.CustomDomain.TargetPort
}

func (v *createCustomDomainCustomDomainCreateCustomDomain) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomDomainCustomDomainCreateCustomDomain
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomDomainCustomDomainCreateCustomDomain = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CustomDomain)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomDomainCustomDomainCreateCustomDomain struct {
	Id string `json:"id"`

	Domain string `json:"domain"`

	Status CustomDomainStatus `json:"status"`

	EnvironmentId string `json:"environmentId"`

	ServiceId string `json:"serviceId"`

	TargetPort int `json:"targetPort"`
}

func (v *createCustomDomainCustomDomainCreateCustomDomain) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomDomainCustomDomainCreateCustomDomain) __premarshalJSON() (*__premarshalcreateCustomDomainCustomDomainCreateCustomDomain, error) {
	var retval __premarshalcreateCustomDomainCustomDomainCreateCustomDomain

	retval.Id = v.CustomDomain.Id
	retval.Domain = v.CustomDomain.Domain
	retval.Status = v.CustomDomain.Status
	retval.EnvironmentId = v.CustomDomain.EnvironmentId
	retval.ServiceId = v.CustomDomain.ServiceId
	retval.TargetPort = v.CustomDomain.TargetPort
	return &retval, nil
}

// createCustomDomainResponse is returned by createCustomDomain on success.
type createCustomDomainResponse struct {
	// Creates a new custom domain.
	CustomDomainCreate createCustomDomainCustomDomainCreateCustomDomain `json:"customDomainCreate"`
}

// GetCustomDomainCreate returns createCustomDomainResponse.CustomDomainCreate, and is useful for accessing the field via an interface.
func (v *createCustomDomainResponse) GetCustomDomainCreate() createCustomDomainCustomDomainCreateCustomDomain {
	return v.CustomDomainCreate
}

// createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger includes the requested fields of the GraphQL type DeploymentTrigger.
type createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger struct {
	DeploymentTrigger `json:"-"`
}

// GetId returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.Id, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetId() string {
	return v.DeploymentTrigger.Id
}

// GetProvider returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.Provider, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetProvider() string {
	return v.DeploymentTrigger.Provider
}

// GetRepository returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.Repository, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetRepository() string {
	return v.DeploymentTrigger.Repository
}

// GetBranch returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.Branch, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetBranch() string {
	return v.DeploymentTrigger.Branch
}

// GetCheckSuites returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.CheckSuites, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetCheckSuites() bool {
	return v.DeploymentTrigger.CheckSuites
}

// GetProjectId returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.ProjectId, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetProjectId() string {
	return v.DeploymentTrigger.ProjectId
}

// GetServiceId returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.ServiceId, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetServiceId() string {
	return v.DeploymentTrigger.ServiceId
}

// GetEnvironmentId returns createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger.EnvironmentId, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) GetEnvironmentId() string {
	return v.DeploymentTrigger.EnvironmentId
}

func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentTrigger)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger struct {
	Id string `json:"id"`

	Provider string `json:"provider"`

	Repository string `json:"repository"`

	Branch string `json:"branch"`

	CheckSuites bool `json:"checkSuites"`

	ProjectId string `json:"projectId"`

	ServiceId string `json:"serviceId"`

	EnvironmentId string `json:"environmentId"`
}

func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger) __premarshalJSON() (*__premarshalcreateDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger, error) {
	var retval __premarshalcreateDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger

	retval.Id = v.DeploymentTrigger.Id
	retval.Provider = v.DeploymentTrigger.Provider
	retval.Repository = v.DeploymentTrigger.Repository
	retval.Branch = v.DeploymentTrigger.Branch
	retval.CheckSuites = v.DeploymentTrigger.CheckSuites
	retval.ProjectId = v.DeploymentTrigger.ProjectId
	retval.ServiceId = v.DeploymentTrigger.ServiceId
	retval.EnvironmentId = v.DeploymentTrigger.EnvironmentId
	return &retval, nil
}

// createDeploymentTriggerResponse is returned by createDeploymentTrigger on success.
type createDeploymentTriggerResponse struct {
	// Creates a deployment trigger.
	DeploymentTriggerCreate createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger `json:"deploymentTriggerCreate"`
}

// GetDeploymentTriggerCreate returns createDeploymentTriggerResponse.DeploymentTriggerCreate, and is useful for accessing the field via an interface.
func (v *createDeploymentTriggerResponse) GetDeploymentTriggerCreate() createDeploymentTriggerDeploymentTriggerCreateDeploymentTrigger {
	return v.DeploymentTriggerCreate
}

// createEnvironmentEnvironmentCreateEnvironment includes the requested fields of the GraphQL type Environment.
type createEnvironmentEnvironmentCreateEnvironment struct {
	Environment `json:"-"`
}

// GetId returns createEnvironmentEnvironmentCreateEnvironment.Id, and is useful for accessing the field via an interface.
func (v *createEnvironmentEnvironmentCreateEnvironment) GetId() string { return v.Environment.Id }

// GetName returns createEnvironmentEnvironmentCreateEnvironment.Name, and is useful for accessing the field via an interface.
func (v *createEnvironmentEnvironmentCreateEnvironment) GetName() string { return v.Environment.Name }

// GetProjectId returns createEnvironmentEnvironmentCreateEnvironment.ProjectId, and is useful for accessing the field via an interface.
func (v *createEnvironmentEnvironmentCreateEnvironment) GetProjectId() string {
	return v.Environment.ProjectId
}

func (v *createEnvironmentEnvironmentCreateEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createEnvironmentEnvironmentCreateEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.createEnvironmentEnvironmentCreateEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Environment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateEnvironmentEnvironmentCreateEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *createEnvironmentEnvironmentCreateEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createEnvironmentEnvironmentCreateEnvironment) __premarshalJSON() (*__premarshalcreateEnvironmentEnvironmentCreateEnvironment, error) {
	var retval __premarshalcreateEnvironmentEnvironmentCreateEnvironment

	retval.Id = v.Environment.Id
	retval.Name = v.Environment.Name
	retval.ProjectId = v.Environment.ProjectId
	return &retval, nil
}

// createEnvironmentResponse is returned by createEnvironment on success.
type createEnvironmentResponse struct {
	// Creates a new environment.
	EnvironmentCreate createEnvironmentEnvironmentCreateEnvironment `json:"environmentCreate"`
}

// GetEnvironmentCreate returns createEnvironmentResponse.EnvironmentCreate, and is useful for accessing the field via an interface.
func (v *createEnvironmentResponse) GetEnvironmentCreate() createEnvironmentEnvironmentCreateEnvironment {
	return v.EnvironmentCreate
}

// createProjectProjectCreateProject includes the requested fields of the GraphQL type Project.
type createProjectProjectCreateProject struct {
	Project `json:"-"`
}

// GetId returns createProjectProjectCreateProject.Id, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetId() string { return v.Project.Id }

// GetName returns createProjectProjectCreateProject.Name, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetName() string { return v.Project.Name }

// GetDescription returns createProjectProjectCreateProject.Description, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetDescription() string { return v.Project.Description }

// GetIsPublic returns createProjectProjectCreateProject.IsPublic, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetIsPublic() bool { return v.Project.IsPublic }

// GetPrDeploys returns createProjectProjectCreateProject.PrDeploys, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetPrDeploys() bool { return v.Project.PrDeploys }

// GetTeam returns createProjectProjectCreateProject.Team, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetTeam() *ProjectTeam { return v.Project.Team }

// GetEnvironments returns createProjectProjectCreateProject.Environments, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Project.Environments
}

func (v *createProjectProjectCreateProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectProjectCreateProject
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectProjectCreateProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Project)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectProjectCreateProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	IsPublic bool `json:"isPublic"`

	PrDeploys bool `json:"prDeploys"`

	Team *ProjectTeam `json:"team"`

	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

func (v *createProjectProjectCreateProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectProjectCreateProject) __premarshalJSON() (*__premarshalcreateProjectProjectCreateProject, error) {
	var retval __premarshalcreateProjectProjectCreateProject

	retval.Id = v.Project.Id
	retval.Name = v.Project.Name
	retval.Description = v.Project.Description
	retval.IsPublic = v.Project.IsPublic
	retval.PrDeploys = v.Project.PrDeploys
	retval.Team = v.Project.Team
	retval.Environments = v.Project.Environments
	return &retval, nil
}

// createProjectResponse is returned by createProject on success.
type createProjectResponse struct {
	// Creates a new project.
	ProjectCreate createProjectProjectCreateProject `json:"projectCreate"`
}

// GetProjectCreate returns createProjectResponse.ProjectCreate, and is useful for accessing the field via an interface.
func (v *createProjectResponse) GetProjectCreate() createProjectProjectCreateProject {
	return v.ProjectCreate
}

// createServiceDomainResponse is returned by createServiceDomain on success.
type createServiceDomainResponse struct {
	// Creates a new service domain.
	ServiceDomainCreate createServiceDomainServiceDomainCreateServiceDomain `json:"serviceDomainCreate"`
}

// GetServiceDomainCreate returns createServiceDomainResponse.ServiceDomainCreate, and is useful for accessing the field via an interface.
func (v *createServiceDomainResponse) GetServiceDomainCreate() createServiceDomainServiceDomainCreateServiceDomain {
	return v.ServiceDomainCreate
}

// createServiceDomainServiceDomainCreateServiceDomain includes the requested fields of the GraphQL type ServiceDomain.
type createServiceDomainServiceDomainCreateServiceDomain struct {
	ServiceDomain `json:"-"`
}

// GetId returns createServiceDomainServiceDomainCreateServiceDomain.Id, and is useful for accessing the field via an interface.
func (v *createServiceDomainServiceDomainCreateServiceDomain) GetId() string {
	return v.ServiceDomain.Id
}

// GetDomain returns createServiceDomainServiceDomainCreateServiceDomain.Domain, and is useful for accessing the field via an interface.
func (v *createServiceDomainServiceDomainCreateServiceDomain) GetDomain() string {
	return v.ServiceDomain.Domain
}

// GetSuffix returns createServiceDomainServiceDomainCreateServiceDomain.Suffix, and is useful for accessing the field via an interface.
func (v *createServiceDomainServiceDomainCreateServiceDomain) GetSuffix() string {
	return v.ServiceDomain.Suffix
}

// GetEnvironmentId returns createServiceDomainServiceDomainCreateServiceDomain.EnvironmentId, and is useful for accessing the field via an interface.
func (v *createServiceDomainServiceDomainCreateServiceDomain) GetEnvironmentId() string {
	return v.ServiceDomain.EnvironmentId
}

// GetServiceId returns createServiceDomainServiceDomainCreateServiceDomain.ServiceId, and is useful for accessing the field via an interface.
func (v *createServiceDomainServiceDomainCreateServiceDomain) GetServiceId() string {
	return v.ServiceDomain.ServiceId
}

func (v *createServiceDomainServiceDomainCreateServiceDomain) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createServiceDomainServiceDomainCreateServiceDomain
		graphql.NoUnmarshalJSON
	}
	firstPass.createServiceDomainServiceDomainCreateServiceDomain = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ServiceDomain)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateServiceDomainServiceDomainCreateServiceDomain struct {
	Id string `json:"id"`

	Domain string `json:"domain"`

	Suffix string `json:"suffix"`

	EnvironmentId string `json:"environmentId"`

	ServiceId string `json:"serviceId"`
}

func (v *createServiceDomainServiceDomainCreateServiceDomain) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createServiceDomainServiceDomainCreateServiceDomain) __premarshalJSON() (*__premarshalcreateServiceDomainServiceDomainCreateServiceDomain, error) {
	var retval __premarshalcreateServiceDomainServiceDomainCreateServiceDomain

	retval.Id = v.ServiceDomain.Id
	retval.Domain = v.ServiceDomain.Domain
	retval.Suffix = v.ServiceDomain.Suffix
	retval.EnvironmentId = v.ServiceDomain.EnvironmentId
	retval.ServiceId = v.ServiceDomain.ServiceId
	return &retval, nil
}

// createServiceResponse is returned by createService on success.
type createServiceResponse struct {
	// Creates a new service.
	ServiceCreate createServiceServiceCreateService `json:"serviceCreate"`
}

// GetServiceCreate returns createServiceResponse.ServiceCreate, and is useful for accessing the field via an interface.
func (v *createServiceResponse) GetServiceCreate() createServiceServiceCreateService {
	return v.ServiceCreate
}

// createServiceServiceCreateService includes the requested fields of the GraphQL type Service.
type createServiceServiceCreateService struct {
	Service `json:"-"`
}

// GetId returns createServiceServiceCreateService.Id, and is useful for accessing the field via an interface.
func (v *createServiceServiceCreateService) GetId() string { return v.Service.Id }

// GetName returns createServiceServiceCreateService.Name, and is useful for accessing the field via an interface.
func (v *createServiceServiceCreateService) GetName() string { return v.Service.Name }

// GetProjectId returns createServiceServiceCreateService.ProjectId, and is useful for accessing the field via an interface.
func (v *createServiceServiceCreateService) GetProjectId() string { return v.Service.ProjectId }

func (v *createServiceServiceCreateService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createServiceServiceCreateService
		graphql.NoUnmarshalJSON
	}
	firstPass.createServiceServiceCreateService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateServiceServiceCreateService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *createServiceServiceCreateService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createServiceServiceCreateService) __premarshalJSON() (*__premarshalcreateServiceServiceCreateService, error) {
	var retval __premarshalcreateServiceServiceCreateService

	retval.Id = v.Service.Id
	retval.Name = v.Service.Name
	retval.ProjectId = v.Service.ProjectId
	return &retval, nil
}

// createTcpProxyResponse is returned by createTcpProxy on success.
type createTcpProxyResponse struct {
	// Creates a new TCP proxy for a service instance.
	TcpProxyCreate createTcpProxyTcpProxyCreateTCPProxy `json:"tcpProxyCreate"`
}

// GetTcpProxyCreate returns createTcpProxyResponse.TcpProxyCreate, and is useful for accessing the field via an interface.
func (v *createTcpProxyResponse) GetTcpProxyCreate() createTcpProxyTcpProxyCreateTCPProxy {
	return v.TcpProxyCreate
}

// createTcpProxyTcpProxyCreateTCPProxy includes the requested fields of the GraphQL type TCPProxy.
type createTcpProxyTcpProxyCreateTCPProxy struct {
	TCPProxy `json:"-"`
}

// GetId returns createTcpProxyTcpProxyCreateTCPProxy.Id, and is useful for accessing the field via an interface.
func (v *createTcpProxyTcpProxyCreateTCPProxy) GetId() string { return v.TCPProxy.Id }

// GetApplicationPort returns createTcpProxyTcpProxyCreateTCPProxy.ApplicationPort, and is useful for accessing the field via an interface.
func (v *createTcpProxyTcpProxyCreateTCPProxy) GetApplicationPort() int {
	return v.TCPProxy.ApplicationPort
}

// GetProxyPort returns createTcpProxyTcpProxyCreateTCPProxy.ProxyPort, and is useful for accessing the field via an interface.
func (v *createTcpProxyTcpProxyCreateTCPProxy) GetProxyPort() int { return v.TCPProxy.ProxyPort }

// GetDomain returns createTcpProxyTcpProxyCreateTCPProxy.Domain, and is useful for accessing the field via an interface.
func (v *createTcpProxyTcpProxyCreateTCPProxy) GetDomain() string { return v.TCPProxy.Domain }

// GetEnvironmentId returns createTcpProxyTcpProxyCreateTCPProxy.EnvironmentId, and is useful for accessing the field via an interface.
func (v *createTcpProxyTcpProxyCreateTCPProxy) GetEnvironmentId() string {
	return v.TCPProxy.EnvironmentId
}

// GetServiceId returns createTcpProxyTcpProxyCreateTCPProxy.ServiceId, and is useful for accessing the field via an interface.
func (v *createTcpProxyTcpProxyCreateTCPProxy) GetServiceId() string { return v.TCPProxy.ServiceId }

func (v *createTcpProxyTcpProxyCreateTCPProxy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createTcpProxyTcpProxyCreateTCPProxy
		graphql.NoUnmarshalJSON
	}
	firstPass.createTcpProxyTcpProxyCreateTCPProxy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TCPProxy)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateTcpProxyTcpProxyCreateTCPProxy struct {
	Id string `json:"id"`

	ApplicationPort int `json:"applicationPort"`

	ProxyPort int `json:"proxyPort"`

	Domain string `json:"domain"`

	EnvironmentId string `json:"environmentId"`

	ServiceId string `json:"serviceId"`
}

func (v *createTcpProxyTcpProxyCreateTCPProxy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createTcpProxyTcpProxyCreateTCPProxy) __premarshalJSON() (*__premarshalcreateTcpProxyTcpProxyCreateTCPProxy, error) {
	var retval __premarshalcreateTcpProxyTcpProxyCreateTCPProxy

	retval.Id = v.TCPProxy.Id
	retval.ApplicationPort = v.TCPProxy.ApplicationPort
	retval.ProxyPort = v.TCPProxy.ProxyPort
	retval.Domain = v.TCPProxy.Domain
	retval.EnvironmentId = v.TCPProxy.EnvironmentId
	retval.ServiceId = v.TCPProxy.ServiceId
	return &retval, nil
}

// createVolumeResponse is returned by createVolume on success.
type createVolumeResponse struct {
	// Create a persistent volume in a project
	VolumeCreate createVolumeVolumeCreateVolume `json:"volumeCreate"`
}

// GetVolumeCreate returns createVolumeResponse.VolumeCreate, and is useful for accessing the field via an interface.
func (v *createVolumeResponse) GetVolumeCreate() createVolumeVolumeCreateVolume {
	return v.VolumeCreate
}

// createVolumeVolumeCreateVolume includes the requested fields of the GraphQL type Volume.
type createVolumeVolumeCreateVolume struct {
	Volume `json:"-"`
}

// GetId returns createVolumeVolumeCreateVolume.Id, and is useful for accessing the field via an interface.
func (v *createVolumeVolumeCreateVolume) GetId() string { return v.Volume.Id }

// GetName returns createVolumeVolumeCreateVolume.Name, and is useful for accessing the field via an interface.
func (v *createVolumeVolumeCreateVolume) GetName() string { return v.Volume.Name }

// GetVolumeInstances returns createVolumeVolumeCreateVolume.VolumeInstances, and is useful for accessing the field via an interface.
func (v *createVolumeVolumeCreateVolume) GetVolumeInstances() VolumeVolumeInstancesVolumeVolumeInstancesConnection {
	return v.Volume.VolumeInstances
}

func (v *createVolumeVolumeCreateVolume) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createVolumeVolumeCreateVolume
		graphql.NoUnmarshalJSON
	}
	firstPass.createVolumeVolumeCreateVolume = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Volume)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateVolumeVolumeCreateVolume struct {
	Id string `json:"id"`

	Name string `json:"name"`

	VolumeInstances VolumeVolumeInstancesVolumeVolumeInstancesConnection `json:"volumeInstances"`
}

func (v *createVolumeVolumeCreateVolume) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createVolumeVolumeCreateVolume) __premarshalJSON() (*__premarshalcreateVolumeVolumeCreateVolume, error) {
	var retval __premarshalcreateVolumeVolumeCreateVolume

	retval.Id = v.Volume.Id
	retval.Name = v.Volume.Name
	retval.VolumeInstances = v.Volume.VolumeInstances
	return &retval, nil
}

// deleteCustomDomainResponse is returned by deleteCustomDomain on success.
type deleteCustomDomainResponse struct {
	// Deletes a custom domain.
	CustomDomainDelete bool `json:"customDomainDelete"`
}

// GetCustomDomainDelete returns deleteCustomDomainResponse.CustomDomainDelete, and is useful for accessing the field via an interface.
func (v *deleteCustomDomainResponse) GetCustomDomainDelete() bool { return v.CustomDomainDelete }

// deleteDeploymentTriggerResponse is returned by deleteDeploymentTrigger on success.
type deleteDeploymentTriggerResponse struct {
	// Deletes a deployment trigger.
	DeploymentTriggerDelete bool `json:"deploymentTriggerDelete"`
}

// GetDeploymentTriggerDelete returns deleteDeploymentTriggerResponse.DeploymentTriggerDelete, and is useful for accessing the field via an interface.
func (v *deleteDeploymentTriggerResponse) GetDeploymentTriggerDelete() bool {
	return v.DeploymentTriggerDelete
}

// deleteEnvironmentResponse is returned by deleteEnvironment on success.
type deleteEnvironmentResponse struct {
	// Deletes an environment.
	EnvironmentDelete bool `json:"environmentDelete"`
}

// GetEnvironmentDelete returns deleteEnvironmentResponse.EnvironmentDelete, and is useful for accessing the field via an interface.
func (v *deleteEnvironmentResponse) GetEnvironmentDelete() bool { return v.EnvironmentDelete }

// deleteProjectResponse is returned by deleteProject on success.
type deleteProjectResponse struct {
	// Deletes a project.
	ProjectDelete bool `json:"projectDelete"`
}

// GetProjectDelete returns deleteProjectResponse.ProjectDelete, and is useful for accessing the field via an interface.
func (v *deleteProjectResponse) GetProjectDelete() bool { return v.ProjectDelete }

// deleteServiceDomainResponse is returned by deleteServiceDomain on success.
type deleteServiceDomainResponse struct {
	// Deletes a service domain.
	ServiceDomainDelete bool `json:"serviceDomainDelete"`
}

// GetServiceDomainDelete returns deleteServiceDomainResponse.ServiceDomainDelete, and is useful for accessing the field via an interface.
func (v *deleteServiceDomainResponse) GetServiceDomainDelete() bool { return v.ServiceDomainDelete }

// deleteServiceResponse is returned by deleteService on success.
type deleteServiceResponse struct {
	// Deletes a service.
	ServiceDelete bool `json:"serviceDelete"`
}

// GetServiceDelete returns deleteServiceResponse.ServiceDelete, and is useful for accessing the field via an interface.
func (v *deleteServiceResponse) GetServiceDelete() bool { return v.ServiceDelete }

// deleteTcpProxyResponse is returned by deleteTcpProxy on success.
type deleteTcpProxyResponse struct {
	// Deletes a TCP proxy by id
	TcpProxyDelete bool `json:"tcpProxyDelete"`
}

// GetTcpProxyDelete returns deleteTcpProxyResponse.TcpProxyDelete, and is useful for accessing the field via an interface.
func (v *deleteTcpProxyResponse) GetTcpProxyDelete() bool { return v.TcpProxyDelete }

// deleteVariableResponse is returned by deleteVariable on success.
type deleteVariableResponse struct {
	// Deletes a variable.
	VariableDelete bool `json:"variableDelete"`
}

// GetVariableDelete returns deleteVariableResponse.VariableDelete, and is useful for accessing the field via an interface.
func (v *deleteVariableResponse) GetVariableDelete() bool { return v.VariableDelete }

// deleteVolumeResponse is returned by deleteVolume on success.
type deleteVolumeResponse struct {
	// Delete a persistent volume in a project
	VolumeDelete bool `json:"volumeDelete"`
}

// GetVolumeDelete returns deleteVolumeResponse.VolumeDelete, and is useful for accessing the field via an interface.
func (v *deleteVolumeResponse) GetVolumeDelete() bool { return v.VolumeDelete }

// disconnectServiceResponse is returned by disconnectService on success.
type disconnectServiceResponse struct {
	// Disconnect a service from a repo
	ServiceDisconnect disconnectServiceServiceDisconnectService `json:"serviceDisconnect"`
}

// GetServiceDisconnect returns disconnectServiceResponse.ServiceDisconnect, and is useful for accessing the field via an interface.
func (v *disconnectServiceResponse) GetServiceDisconnect() disconnectServiceServiceDisconnectService {
	return v.ServiceDisconnect
}

// disconnectServiceServiceDisconnectService includes the requested fields of the GraphQL type Service.
type disconnectServiceServiceDisconnectService struct {
	Id string `json:"id"`
}

// GetId returns disconnectServiceServiceDisconnectService.Id, and is useful for accessing the field via an interface.
func (v *disconnectServiceServiceDisconnectService) GetId() string { return v.Id }

// getCustomDomainCustomDomain includes the requested fields of the GraphQL type CustomDomain.
type getCustomDomainCustomDomain struct {
	CustomDomain `json:"-"`
}

// GetId returns getCustomDomainCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *getCustomDomainCustomDomain) GetId() string { return v.CustomDomain.Id }

// GetDomain returns getCustomDomainCustomDomain.Domain, and is useful for accessing the field via an interface.
func (v *getCustomDomainCustomDomain) GetDomain() string { return v.CustomDomain.Domain }

// GetStatus returns getCustomDomainCustomDomain.Status, and is useful for accessing the field via an interface.
func (v *getCustomDomainCustomDomain) GetStatus() CustomDomainStatus { return v.CustomDomain.Status }

// GetEnvironmentId returns getCustomDomainCustomDomain.EnvironmentId, and is useful for accessing the field via an interface.
func (v *getCustomDomainCustomDomain) GetEnvironmentId() string { return v.CustomDomain.EnvironmentId }

// GetServiceId returns getCustomDomainCustomDomain.ServiceId, and is useful for accessing the field via an interface.
func (v *getCustomDomainCustomDomain) GetServiceId() string { return v.CustomDomain.ServiceId }

// GetTargetPort returns getCustomDomainCustomDomain.TargetPort, and is useful for accessing the field via an interface.
func (v *getCustomDomainCustomDomain) GetTargetPort() int { return v.CustomDomain.TargetPort }

func (v *getCustomDomainCustomDomain) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomDomainCustomDomain
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomDomainCustomDomain = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CustomDomain)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomDomainCustomDomain struct {
	Id string `json:"id"`

	Domain string `json:"domain"`

	Status CustomDomainStatus `json:"status"`

	EnvironmentId string `json:"environmentId"`

	ServiceId string `json:"serviceId"`

	TargetPort int `json:"targetPort"`
}

func (v *getCustomDomainCustomDomain) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomDomainCustomDomain) __premarshalJSON() (*__premarshalgetCustomDomainCustomDomain, error) {
	var retval __premarshalgetCustomDomainCustomDomain

	retval.Id = v.CustomDomain.Id
	retval.Domain = v.CustomDomain.Domain
	retval.Status = v.CustomDomain.Status
	retval.EnvironmentId = v.CustomDomain.EnvironmentId
	retval.ServiceId = v.CustomDomain.ServiceId
	retval.TargetPort = v.CustomDomain.TargetPort
	return &retval, nil
}

// getCustomDomainResponse is returned by getCustomDomain on success.
type getCustomDomainResponse struct {
	// Fetch details for a custom domain
	CustomDomain getCustomDomainCustomDomain `json:"customDomain"`
}

// GetCustomDomain returns getCustomDomainResponse.CustomDomain, and is useful for accessing the field via an interface.
func (v *getCustomDomainResponse) GetCustomDomain() getCustomDomainCustomDomain {
	return v.CustomDomain
}

// getEnvironmentEnvironment includes the requested fields of the GraphQL type Environment.
type getEnvironmentEnvironment struct {
	Environment `json:"-"`
}

// GetId returns getEnvironmentEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentEnvironment) GetId() string { return v.Environment.Id }

// GetName returns getEnvironmentEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentEnvironment) GetName() string { return v.Environment.Name }

// GetProjectId returns getEnvironmentEnvironment.ProjectId, and is useful for accessing the field via an interface.
func (v *getEnvironmentEnvironment) GetProjectId() string { return v.Environment.ProjectId }

func (v *getEnvironmentEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Environment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetEnvironmentEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *getEnvironmentEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentEnvironment) __premarshalJSON() (*__premarshalgetEnvironmentEnvironment, error) {
	var retval __premarshalgetEnvironmentEnvironment

	retval.Id = v.Environment.Id
	retval.Name = v.Environment.Name
	retval.ProjectId = v.Environment.ProjectId
	return &retval, nil
}

// getEnvironmentResponse is returned by getEnvironment on success.
type getEnvironmentResponse struct {
	// Find a single environment
	Environment getEnvironmentEnvironment `json:"environment"`
}

// GetEnvironment returns getEnvironmentResponse.Environment, and is useful for accessing the field via an interface.
func (v *getEnvironmentResponse) GetEnvironment() getEnvironmentEnvironment { return v.Environment }

// getEnvironmentsEnvironmentsQueryEnvironmentsConnection includes the requested fields of the GraphQL type QueryEnvironmentsConnection.
type getEnvironmentsEnvironmentsQueryEnvironmentsConnection struct {
	Edges []getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge `json:"edges"`
}

// GetEdges returns getEnvironmentsEnvironmentsQueryEnvironmentsConnection.Edges, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnection) GetEdges() []getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge {
	return v.Edges
}

// getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge includes the requested fields of the GraphQL type QueryEnvironmentsConnectionEdge.
type getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge struct {
	Node getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment `json:"node"`
}

// GetNode returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge.Node, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge) GetNode() getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment {
	return v.Node
}

// getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment includes the requested fields of the GraphQL type Environment.
type getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment struct {
	Environment `json:"-"`
}

// GetId returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) GetId() string {
	return v.Environment.Id
}

// GetName returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) GetName() string {
	return v.Environment.Name
}

// GetProjectId returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment.ProjectId, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) GetProjectId() string {
	return v.Environment.ProjectId
}

func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Environment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) __premarshalJSON() (*__premarshalgetEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment, error) {
	var retval __premarshalgetEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment

	retval.Id = v.Environment.Id
	retval.Name = v.Environment.Name
	retval.ProjectId = v.Environment.ProjectId
	return &retval, nil
}

// getEnvironmentsResponse is returned by getEnvironments on success.
type getEnvironmentsResponse struct {
	// Gets all environments for a project.
	Environments getEnvironmentsEnvironmentsQueryEnvironmentsConnection `json:"environments"`
}

// GetEnvironments returns getEnvironmentsResponse.Environments, and is useful for accessing the field via an interface.
func (v *getEnvironmentsResponse) GetEnvironments() getEnvironmentsEnvironmentsQueryEnvironmentsConnection {
	return v.Environments
}

// getProjectProject includes the requested fields of the GraphQL type Project.
type getProjectProject struct {
	Project `json:"-"`
}

// GetId returns getProjectProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetId() string { return v.Project.Id }

// GetName returns getProjectProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetName() string { return v.Project.Name }

// GetDescription returns getProjectProject.Description, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetDescription() string { return v.Project.Description }

// GetIsPublic returns getProjectProject.IsPublic, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetIsPublic() bool { return v.Project.IsPublic }

// GetPrDeploys returns getProjectProject.PrDeploys, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetPrDeploys() bool { return v.Project.PrDeploys }

// GetTeam returns getProjectProject.Team, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetTeam() *ProjectTeam { return v.Project.Team }

// GetEnvironments returns getProjectProject.Environments, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Project.Environments
}

func (v *getProjectProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Project)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	IsPublic bool `json:"isPublic"`

	PrDeploys bool `json:"prDeploys"`

	Team *ProjectTeam `json:"team"`

	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

func (v *getProjectProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectProject) __premarshalJSON() (*__premarshalgetProjectProject, error) {
	var retval __premarshalgetProjectProject

	retval.Id = v.Project.Id
	retval.Name = v.Project.Name
	retval.Description = v.Project.Description
	retval.IsPublic = v.Project.IsPublic
	retval.PrDeploys = v.Project.PrDeploys
	retval.Team = v.Project.Team
	retval.Environments = v.Project.Environments
	return &retval, nil
}

// getProjectResponse is returned by getProject on success.
type getProjectResponse struct {
	// Get a project by ID
	Project getProjectProject `json:"project"`
}

// GetProject returns getProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectResponse) GetProject() getProjectProject { return v.Project }

// getServiceInstanceResponse is returned by getServiceInstance on success.
type getServiceInstanceResponse struct {
	// Get a service instance belonging to a service and environment
	ServiceInstance getServiceInstanceServiceInstance `json:"serviceInstance"`
}

// GetServiceInstance returns getServiceInstanceResponse.ServiceInstance, and is useful for accessing the field via an interface.
func (v *getServiceInstanceResponse) GetServiceInstance() getServiceInstanceServiceInstance {
	return v.ServiceInstance
}

// getServiceInstanceServiceInstance includes the requested fields of the GraphQL type ServiceInstance.
type getServiceInstanceServiceInstance struct {
	Source            *getServiceInstanceServiceInstanceSourceServiceSource `json:"source"`
	RootDirectory     *string                                               `json:"rootDirectory"`
	RailwayConfigFile *string                                               `json:"railwayConfigFile"`
	CronSchedule      *string                                               `json:"cronSchedule"`
	Region            string                                                `json:"region"`
	NumReplicas       int                                                   `json:"numReplicas"`
}

// GetSource returns getServiceInstanceServiceInstance.Source, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstance) GetSource() *getServiceInstanceServiceInstanceSourceServiceSource {
	return v.Source
}

// GetRootDirectory returns getServiceInstanceServiceInstance.RootDirectory, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstance) GetRootDirectory() *string { return v.RootDirectory }

// GetRailwayConfigFile returns getServiceInstanceServiceInstance.RailwayConfigFile, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstance) GetRailwayConfigFile() *string {
	return v.RailwayConfigFile
}

// GetCronSchedule returns getServiceInstanceServiceInstance.CronSchedule, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstance) GetCronSchedule() *string { return v.CronSchedule }

// GetRegion returns getServiceInstanceServiceInstance.Region, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstance) GetRegion() string { return v.Region }

// GetNumReplicas returns getServiceInstanceServiceInstance.NumReplicas, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstance) GetNumReplicas() int { return v.NumReplicas }

// getServiceInstanceServiceInstanceSourceServiceSource includes the requested fields of the GraphQL type ServiceSource.
type getServiceInstanceServiceInstanceSourceServiceSource struct {
	Image *string `json:"image"`
	Repo  *string `json:"repo"`
}

// GetImage returns getServiceInstanceServiceInstanceSourceServiceSource.Image, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstanceSourceServiceSource) GetImage() *string { return v.Image }

// GetRepo returns getServiceInstanceServiceInstanceSourceServiceSource.Repo, and is useful for accessing the field via an interface.
func (v *getServiceInstanceServiceInstanceSourceServiceSource) GetRepo() *string { return v.Repo }

// getServiceResponse is returned by getService on success.
type getServiceResponse struct {
	// Get a service by ID
	Service getServiceService `json:"service"`
}

// GetService returns getServiceResponse.Service, and is useful for accessing the field via an interface.
func (v *getServiceResponse) GetService() getServiceService { return v.Service }

// getServiceService includes the requested fields of the GraphQL type Service.
type getServiceService struct {
	Service `json:"-"`
}

// GetId returns getServiceService.Id, and is useful for accessing the field via an interface.
func (v *getServiceService) GetId() string { return v.Service.Id }

// GetName returns getServiceService.Name, and is useful for accessing the field via an interface.
func (v *getServiceService) GetName() string { return v.Service.Name }

// GetProjectId returns getServiceService.ProjectId, and is useful for accessing the field via an interface.
func (v *getServiceService) GetProjectId() string { return v.Service.ProjectId }

func (v *getServiceService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getServiceService
		graphql.NoUnmarshalJSON
	}
	firstPass.getServiceService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetServiceService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *getServiceService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getServiceService) __premarshalJSON() (*__premarshalgetServiceService, error) {
	var retval __premarshalgetServiceService

	retval.Id = v.Service.Id
	retval.Name = v.Service.Name
	retval.ProjectId = v.Service.ProjectId
	return &retval, nil
}

// getSharedVariablesResponse is returned by getSharedVariables on success.
type getSharedVariablesResponse struct {
	// All variables by pluginId or serviceId. If neither are provided, all shared variables are returned.
	Variables map[string]interface{} `json:"variables"`
}

// GetVariables returns getSharedVariablesResponse.Variables, and is useful for accessing the field via an interface.
func (v *getSharedVariablesResponse) GetVariables() map[string]interface{} { return v.Variables }

// getTcpProxyResponse is returned by getTcpProxy on success.
type getTcpProxyResponse struct {
	// All TCP proxies for a service instance
	TcpProxies []getTcpProxyTcpProxiesTCPProxy `json:"tcpProxies"`
}

// GetTcpProxies returns getTcpProxyResponse.TcpProxies, and is useful for accessing the field via an interface.
func (v *getTcpProxyResponse) GetTcpProxies() []getTcpProxyTcpProxiesTCPProxy { return v.TcpProxies }

// getTcpProxyTcpProxiesTCPProxy includes the requested fields of the GraphQL type TCPProxy.
type getTcpProxyTcpProxiesTCPProxy struct {
	TCPProxy `json:"-"`
}

// GetId returns getTcpProxyTcpProxiesTCPProxy.Id, and is useful for accessing the field via an interface.
func (v *getTcpProxyTcpProxiesTCPProxy) GetId() string { return v.TCPProxy.Id }

// GetApplicationPort returns getTcpProxyTcpProxiesTCPProxy.ApplicationPort, and is useful for accessing the field via an interface.
func (v *getTcpProxyTcpProxiesTCPProxy) GetApplicationPort() int { return v.TCPProxy.ApplicationPort }

// GetProxyPort returns getTcpProxyTcpProxiesTCPProxy.ProxyPort, and is useful for accessing the field via an interface.
func (v *getTcpProxyTcpProxiesTCPProxy) GetProxyPort() int { return v.TCPProxy.ProxyPort }

// GetDomain returns getTcpProxyTcpProxiesTCPProxy.Domain, and is useful for accessing the field via an interface.
func (v *getTcpProxyTcpProxiesTCPProxy) GetDomain() string { return v.TCPProxy.Domain }

// GetEnvironmentId returns getTcpProxyTcpProxiesTCPProxy.EnvironmentId, and is useful for accessing the field via an interface.
func (v *getTcpProxyTcpProxiesTCPProxy) GetEnvironmentId() string { return v.TCPProxy.EnvironmentId }

// GetServiceId returns getTcpProxyTcpProxiesTCPProxy.ServiceId, and is useful for accessing the field via an interface.
func (v *getTcpProxyTcpProxiesTCPProxy) GetServiceId() string { return v.TCPProxy.ServiceId }

func (v *getTcpProxyTcpProxiesTCPProxy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getTcpProxyTcpProxiesTCPProxy
		graphql.NoUnmarshalJSON
	}
	firstPass.getTcpProxyTcpProxiesTCPProxy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TCPProxy)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetTcpProxyTcpProxiesTCPProxy struct {
	Id string `json:"id"`

	ApplicationPort int `json:"applicationPort"`

	ProxyPort int `json:"proxyPort"`

	Domain string `json:"domain"`

	EnvironmentId string `json:"environmentId"`

	ServiceId string `json:"serviceId"`
}

func (v *getTcpProxyTcpProxiesTCPProxy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getTcpProxyTcpProxiesTCPProxy) __premarshalJSON() (*__premarshalgetTcpProxyTcpProxiesTCPProxy, error) {
	var retval __premarshalgetTcpProxyTcpProxiesTCPProxy

	retval.Id = v.TCPProxy.Id
	retval.ApplicationPort = v.TCPProxy.ApplicationPort
	retval.ProxyPort = v.TCPProxy.ProxyPort
	retval.Domain = v.TCPProxy.Domain
	retval.EnvironmentId = v.TCPProxy.EnvironmentId
	retval.ServiceId = v.TCPProxy.ServiceId
	return &retval, nil
}

// getVariablesResponse is returned by getVariables on success.
type getVariablesResponse struct {
	// All variables by pluginId or serviceId. If neither are provided, all shared variables are returned.
	Variables map[string]interface{} `json:"variables"`
}

// GetVariables returns getVariablesResponse.Variables, and is useful for accessing the field via an interface.
func (v *getVariablesResponse) GetVariables() map[string]interface{} { return v.Variables }

// getVolumeInstancesProject includes the requested fields of the GraphQL type Project.
type getVolumeInstancesProject struct {
	Volumes getVolumeInstancesProjectVolumesProjectVolumesConnection `json:"volumes"`
}

// GetVolumes returns getVolumeInstancesProject.Volumes, and is useful for accessing the field via an interface.
func (v *getVolumeInstancesProject) GetVolumes() getVolumeInstancesProjectVolumesProjectVolumesConnection {
	return v.Volumes
}

// getVolumeInstancesProjectVolumesProjectVolumesConnection includes the requested fields of the GraphQL type ProjectVolumesConnection.
type getVolumeInstancesProjectVolumesProjectVolumesConnection struct {
	Edges []getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdge `json:"edges"`
}

// GetEdges returns getVolumeInstancesProjectVolumesProjectVolumesConnection.Edges, and is useful for accessing the field via an interface.
func (v *getVolumeInstancesProjectVolumesProjectVolumesConnection) GetEdges() []getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdge {
	return v.Edges
}

// getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdge includes the requested fields of the GraphQL type ProjectVolumesConnectionEdge.
type getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdge struct {
	Node getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume `json:"node"`
}

// GetNode returns getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdge.Node, and is useful for accessing the field via an interface.
func (v *getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdge) GetNode() getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume {
	return v.Node
}

// getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume includes the requested fields of the GraphQL type Volume.
type getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume struct {
	Volume `json:"-"`
}

// GetId returns getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume.Id, and is useful for accessing the field via an interface.
func (v *getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume) GetId() string {
	return v.Volume.Id
}

// GetName returns getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume.Name, and is useful for accessing the field via an interface.
func (v *getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume) GetName() string {
	return v.Volume.Name
}

// GetVolumeInstances returns getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume.VolumeInstances, and is useful for accessing the field via an interface.
func (v *getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume) GetVolumeInstances() VolumeVolumeInstancesVolumeVolumeInstancesConnection {
	return v.Volume.VolumeInstances
}

func (v *getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume
		graphql.NoUnmarshalJSON
	}
	firstPass.getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Volume)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume struct {
	Id string `json:"id"`

	Name string `json:"name"`

	VolumeInstances VolumeVolumeInstancesVolumeVolumeInstancesConnection `json:"volumeInstances"`
}

func (v *getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume) __premarshalJSON() (*__premarshalgetVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume, error) {
	var retval __premarshalgetVolumeInstancesProjectVolumesProjectVolumesConnectionEdgesProjectVolumesConnectionEdgeNodeVolume

	retval.Id = v.Volume.Id
	retval.Name = v.Volume.Name
	retval.VolumeInstances = v.Volume.VolumeInstances
	return &retval, nil
}

// getVolumeInstancesResponse is returned by getVolumeInstances on success.
type getVolumeInstancesResponse struct {
	// Get a project by ID
	Project getVolumeInstancesProject `json:"project"`
}

// GetProject returns getVolumeInstancesResponse.Project, and is useful for accessing the field via an interface.
func (v *getVolumeInstancesResponse) GetProject() getVolumeInstancesProject { return v.Project }

// listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnection includes the requested fields of the GraphQL type QueryDeploymentTriggersConnection.
type listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnection struct {
	Edges []listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdge `json:"edges"`
}

// GetEdges returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnection.Edges, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnection) GetEdges() []listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdge {
	return v.Edges
}

// listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdge includes the requested fields of the GraphQL type QueryDeploymentTriggersConnectionEdge.
type listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdge struct {
	Node listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger `json:"node"`
}

// GetNode returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdge.Node, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdge) GetNode() listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger {
	return v.Node
}

// listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger includes the requested fields of the GraphQL type DeploymentTrigger.
type listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger struct {
	DeploymentTrigger `json:"-"`
}

// GetId returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.Id, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetId() string {
	return v.DeploymentTrigger.Id
}

// GetProvider returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.Provider, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetProvider() string {
	return v.DeploymentTrigger.Provider
}

// GetRepository returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.Repository, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetRepository() string {
	return v.DeploymentTrigger.Repository
}

// GetBranch returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.Branch, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetBranch() string {
	return v.DeploymentTrigger.Branch
}

// GetCheckSuites returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.CheckSuites, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetCheckSuites() bool {
	return v.DeploymentTrigger.CheckSuites
}

// GetProjectId returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.ProjectId, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetProjectId() string {
	return v.DeploymentTrigger.ProjectId
}

// GetServiceId returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.ServiceId, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetServiceId() string {
	return v.DeploymentTrigger.ServiceId
}

// GetEnvironmentId returns listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger.EnvironmentId, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) GetEnvironmentId() string {
	return v.DeploymentTrigger.EnvironmentId
}

func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentTrigger)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger struct {
	Id string `json:"id"`

	Provider string `json:"provider"`

	Repository string `json:"repository"`

	Branch string `json:"branch"`

	CheckSuites bool `json:"checkSuites"`

	ProjectId string `json:"projectId"`

	ServiceId string `json:"serviceId"`

	EnvironmentId string `json:"environmentId"`
}

func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger) __premarshalJSON() (*__premarshallistDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger, error) {
	var retval __premarshallistDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnectionEdgesQueryDeploymentTriggersConnectionEdgeNodeDeploymentTrigger

	retval.Id = v.DeploymentTrigger.Id
	retval.Provider = v.DeploymentTrigger.Provider
	retval.Repository = v.DeploymentTrigger.Repository
	retval.Branch = v.DeploymentTrigger.Branch
	retval.CheckSuites = v.DeploymentTrigger.CheckSuites
	retval.ProjectId = v.DeploymentTrigger.ProjectId
	retval.ServiceId = v.DeploymentTrigger.ServiceId
	retval.EnvironmentId = v.DeploymentTrigger.EnvironmentId
	return &retval, nil
}

// listDeploymentTriggersResponse is returned by listDeploymentTriggers on success.
type listDeploymentTriggersResponse struct {
	// All deployment triggers.
	DeploymentTriggers listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnection `json:"deploymentTriggers"`
}

// GetDeploymentTriggers returns listDeploymentTriggersResponse.DeploymentTriggers, and is useful for accessing the field via an interface.
func (v *listDeploymentTriggersResponse) GetDeploymentTriggers() listDeploymentTriggersDeploymentTriggersQueryDeploymentTriggersConnection {
	return v.DeploymentTriggers
}

// listServiceDomainsDomainsAllDomains includes the requested fields of the GraphQL type AllDomains.
type listServiceDomainsDomainsAllDomains struct {
	ServiceDomains []listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain `json:"serviceDomains"`
}

// GetServiceDomains returns listServiceDomainsDomainsAllDomains.ServiceDomains, and is useful for accessing the field via an interface.
func (v *listServiceDomainsDomainsAllDomains) GetServiceDomains() []listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain {
	return v.ServiceDomains
}

// listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain includes the requested fields of the GraphQL type ServiceDomain.
type listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain struct {
	ServiceDomain `json:"-"`
}

// GetId returns listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain.Id, and is useful for accessing the field via an interface.
func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) GetId() string {
	return v.ServiceDomain.Id
}

// GetDomain returns listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain.Domain, and is useful for accessing the field via an interface.
func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) GetDomain() string {
	return v.ServiceDomain.Domain
}

// GetSuffix returns listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain.Suffix, and is useful for accessing the field via an interface.
func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) GetSuffix() string {
	return v.ServiceDomain.Suffix
}

// GetEnvironmentId returns listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain.EnvironmentId, and is useful for accessing the field via an interface.
func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) GetEnvironmentId() string {
	return v.ServiceDomain.EnvironmentId
}

// GetServiceId returns listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain.ServiceId, and is useful for accessing the field via an interface.
func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) GetServiceId() string {
	return v.ServiceDomain.ServiceId
}

func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain
		graphql.NoUnmarshalJSON
	}
	firstPass.listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ServiceDomain)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain struct {
	Id string `json:"id"`

	Domain string `json:"domain"`

	Suffix string `json:"suffix"`

	EnvironmentId string `json:"environmentId"`

	ServiceId string `json:"serviceId"`
}

func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain) __premarshalJSON() (*__premarshallistServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain, error) {
	var retval __premarshallistServiceDomainsDomainsAllDomainsServiceDomainsServiceDomain

	retval.Id = v.ServiceDomain.Id
	retval.Domain = v.ServiceDomain.Domain
	retval.Suffix = v.ServiceDomain.Suffix
	retval.EnvironmentId = v.ServiceDomain.EnvironmentId
	retval.ServiceId = v.ServiceDomain.ServiceId
	return &retval, nil
}

// listServiceDomainsResponse is returned by listServiceDomains on success.
type listServiceDomainsResponse struct {
	// All domains for a service instance
	Domains listServiceDomainsDomainsAllDomains `json:"domains"`
}

// GetDomains returns listServiceDomainsResponse.Domains, and is useful for accessing the field via an interface.
func (v *listServiceDomainsResponse) GetDomains() listServiceDomainsDomainsAllDomains {
	return v.Domains
}

// redeployServiceInstanceResponse is returned by redeployServiceInstance on success.
type redeployServiceInstanceResponse struct {
	// Redeploy a service instance
	ServiceInstanceRedeploy bool `json:"serviceInstanceRedeploy"`
}

// GetServiceInstanceRedeploy returns redeployServiceInstanceResponse.ServiceInstanceRedeploy, and is useful for accessing the field via an interface.
func (v *redeployServiceInstanceResponse) GetServiceInstanceRedeploy() bool {
	return v.ServiceInstanceRedeploy
}

// updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger includes the requested fields of the GraphQL type DeploymentTrigger.
type updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger struct {
	DeploymentTrigger `json:"-"`
}

// GetId returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.Id, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetId() string {
	return v.DeploymentTrigger.Id
}

// GetProvider returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.Provider, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetProvider() string {
	return v.DeploymentTrigger.Provider
}

// GetRepository returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.Repository, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetRepository() string {
	return v.DeploymentTrigger.Repository
}

// GetBranch returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.Branch, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetBranch() string {
	return v.DeploymentTrigger.Branch
}

// GetCheckSuites returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.CheckSuites, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetCheckSuites() bool {
	return v.DeploymentTrigger.CheckSuites
}

// GetProjectId returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.ProjectId, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetProjectId() string {
	return v.DeploymentTrigger.ProjectId
}

// GetServiceId returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.ServiceId, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetServiceId() string {
	return v.DeploymentTrigger.ServiceId
}

// GetEnvironmentId returns updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger.EnvironmentId, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) GetEnvironmentId() string {
	return v.DeploymentTrigger.EnvironmentId
}

func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger
		graphql.NoUnmarshalJSON
	}
	firstPass.updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentTrigger)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger struct {
	Id string `json:"id"`

	Provider string `json:"provider"`

	Repository string `json:"repository"`

	Branch string `json:"branch"`

	CheckSuites bool `json:"checkSuites"`

	ProjectId string `json:"projectId"`

	ServiceId string `json:"serviceId"`

	EnvironmentId string `json:"environmentId"`
}

func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger) __premarshalJSON() (*__premarshalupdateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger, error) {
	var retval __premarshalupdateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger

	retval.Id = v.DeploymentTrigger.Id
	retval.Provider = v.DeploymentTrigger.Provider
	retval.Repository = v.DeploymentTrigger.Repository
	retval.Branch = v.DeploymentTrigger.Branch
	retval.CheckSuites = v.DeploymentTrigger.CheckSuites
	retval.ProjectId = v.DeploymentTrigger.ProjectId
	retval.ServiceId = v.DeploymentTrigger.ServiceId
	retval.EnvironmentId = v.DeploymentTrigger.EnvironmentId
	return &retval, nil
}

// updateDeploymentTriggerResponse is returned by updateDeploymentTrigger on success.
type updateDeploymentTriggerResponse struct {
	// Updates a deployment trigger.
	DeploymentTriggerUpdate updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger `json:"deploymentTriggerUpdate"`
}

// GetDeploymentTriggerUpdate returns updateDeploymentTriggerResponse.DeploymentTriggerUpdate, and is useful for accessing the field via an interface.
func (v *updateDeploymentTriggerResponse) GetDeploymentTriggerUpdate() updateDeploymentTriggerDeploymentTriggerUpdateDeploymentTrigger {
	return v.DeploymentTriggerUpdate
}

// updateProjectProjectUpdateProject includes the requested fields of the GraphQL type Project.
type updateProjectProjectUpdateProject struct {
	Project `json:"-"`
}

// GetId returns updateProjectProjectUpdateProject.Id, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetId() string { return v.Project.Id }

// GetName returns updateProjectProjectUpdateProject.Name, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetName() string { return v.Project.Name }

// GetDescription returns updateProjectProjectUpdateProject.Description, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetDescription() string { return v.Project.Description }

// GetIsPublic returns updateProjectProjectUpdateProject.IsPublic, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetIsPublic() bool { return v.Project.IsPublic }

// GetPrDeploys returns updateProjectProjectUpdateProject.PrDeploys, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetPrDeploys() bool { return v.Project.PrDeploys }

// GetTeam returns updateProjectProjectUpdateProject.Team, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetTeam() *ProjectTeam { return v.Project.Team }

// GetEnvironments returns updateProjectProjectUpdateProject.Environments, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Project.Environments
}

func (v *updateProjectProjectUpdateProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateProjectProjectUpdateProject
		graphql.NoUnmarshalJSON
	}
	firstPass.updateProjectProjectUpdateProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Project)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateProjectProjectUpdateProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	IsPublic bool `json:"isPublic"`

	PrDeploys bool `json:"prDeploys"`

	Team *ProjectTeam `json:"team"`

	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

func (v *updateProjectProjectUpdateProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateProjectProjectUpdateProject) __premarshalJSON() (*__premarshalupdateProjectProjectUpdateProject, error) {
	var retval __premarshalupdateProjectProjectUpdateProject

	retval.Id = v.Project.Id
	retval.Name = v.Project.Name
	retval.Description = v.Project.Description
	retval.IsPublic = v.Project.IsPublic
	retval.PrDeploys = v.Project.PrDeploys
	retval.Team = v.Project.Team
	retval.Environments = v.Project.Environments
	return &retval, nil
}

// updateProjectResponse is returned by updateProject on success.
type updateProjectResponse struct {
	// Updates a project.
	ProjectUpdate updateProjectProjectUpdateProject `json:"projectUpdate"`
}

// GetProjectUpdate returns updateProjectResponse.ProjectUpdate, and is useful for accessing the field via an interface.
func (v *updateProjectResponse) GetProjectUpdate() updateProjectProjectUpdateProject {
	return v.ProjectUpdate
}

// updateServiceDomainResponse is returned by updateServiceDomain on success.
type updateServiceDomainResponse struct {
	// Updates a service domain.
	ServiceDomainUpdate bool `json:"serviceDomainUpdate"`
}

// GetServiceDomainUpdate returns updateServiceDomainResponse.ServiceDomainUpdate, and is useful for accessing the field via an interface.
func (v *updateServiceDomainResponse) GetServiceDomainUpdate() bool { return v.ServiceDomainUpdate }

// updateServiceInstanceResponse is returned by updateServiceInstance on success.
type updateServiceInstanceResponse struct {
	// Update a service instance
	ServiceInstanceUpdate bool `json:"serviceInstanceUpdate"`
}

// GetServiceInstanceUpdate returns updateServiceInstanceResponse.ServiceInstanceUpdate, and is useful for accessing the field via an interface.
func (v *updateServiceInstanceResponse) GetServiceInstanceUpdate() bool {
	return v.ServiceInstanceUpdate
}

// updateServiceResponse is returned by updateService on success.
type updateServiceResponse struct {
	// Updates a service.
	ServiceUpdate updateServiceServiceUpdateService `json:"serviceUpdate"`
}

// GetServiceUpdate returns updateServiceResponse.ServiceUpdate, and is useful for accessing the field via an interface.
func (v *updateServiceResponse) GetServiceUpdate() updateServiceServiceUpdateService {
	return v.ServiceUpdate
}

// updateServiceServiceUpdateService includes the requested fields of the GraphQL type Service.
type updateServiceServiceUpdateService struct {
	Service `json:"-"`
}

// GetId returns updateServiceServiceUpdateService.Id, and is useful for accessing the field via an interface.
func (v *updateServiceServiceUpdateService) GetId() string { return v.Service.Id }

// GetName returns updateServiceServiceUpdateService.Name, and is useful for accessing the field via an interface.
func (v *updateServiceServiceUpdateService) GetName() string { return v.Service.Name }

// GetProjectId returns updateServiceServiceUpdateService.ProjectId, and is useful for accessing the field via an interface.
func (v *updateServiceServiceUpdateService) GetProjectId() string { return v.Service.ProjectId }

func (v *updateServiceServiceUpdateService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateServiceServiceUpdateService
		graphql.NoUnmarshalJSON
	}
	firstPass.updateServiceServiceUpdateService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateServiceServiceUpdateService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *updateServiceServiceUpdateService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateServiceServiceUpdateService) __premarshalJSON() (*__premarshalupdateServiceServiceUpdateService, error) {
	var retval __premarshalupdateServiceServiceUpdateService

	retval.Id = v.Service.Id
	retval.Name = v.Service.Name
	retval.ProjectId = v.Service.ProjectId
	return &retval, nil
}

// updateVolumeInstanceResponse is returned by updateVolumeInstance on success.
type updateVolumeInstanceResponse struct {
	// Update a volume instance. If no environmentId is provided, all volume instances for the volume will be updated.
	VolumeInstanceUpdate bool `json:"volumeInstanceUpdate"`
}

// GetVolumeInstanceUpdate returns updateVolumeInstanceResponse.VolumeInstanceUpdate, and is useful for accessing the field via an interface.
func (v *updateVolumeInstanceResponse) GetVolumeInstanceUpdate() bool { return v.VolumeInstanceUpdate }

// updateVolumeResponse is returned by updateVolume on success.
type updateVolumeResponse struct {
	// Update a persistent volume in a project
	VolumeUpdate updateVolumeVolumeUpdateVolume `json:"volumeUpdate"`
}

// GetVolumeUpdate returns updateVolumeResponse.VolumeUpdate, and is useful for accessing the field via an interface.
func (v *updateVolumeResponse) GetVolumeUpdate() updateVolumeVolumeUpdateVolume {
	return v.VolumeUpdate
}

// updateVolumeVolumeUpdateVolume includes the requested fields of the GraphQL type Volume.
type updateVolumeVolumeUpdateVolume struct {
	Volume `json:"-"`
}

// GetId returns updateVolumeVolumeUpdateVolume.Id, and is useful for accessing the field via an interface.
func (v *updateVolumeVolumeUpdateVolume) GetId() string { return v.Volume.Id }

// GetName returns updateVolumeVolumeUpdateVolume.Name, and is useful for accessing the field via an interface.
func (v *updateVolumeVolumeUpdateVolume) GetName() string { return v.Volume.Name }

// GetVolumeInstances returns updateVolumeVolumeUpdateVolume.VolumeInstances, and is useful for accessing the field via an interface.
func (v *updateVolumeVolumeUpdateVolume) GetVolumeInstances() VolumeVolumeInstancesVolumeVolumeInstancesConnection {
	return v.Volume.VolumeInstances
}

func (v *updateVolumeVolumeUpdateVolume) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateVolumeVolumeUpdateVolume
		graphql.NoUnmarshalJSON
	}
	firstPass.updateVolumeVolumeUpdateVolume = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Volume)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateVolumeVolumeUpdateVolume struct {
	Id string `json:"id"`

	Name string `json:"name"`

	VolumeInstances VolumeVolumeInstancesVolumeVolumeInstancesConnection `json:"volumeInstances"`
}

func (v *updateVolumeVolumeUpdateVolume) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateVolumeVolumeUpdateVolume) __premarshalJSON() (*__premarshalupdateVolumeVolumeUpdateVolume, error) {
	var retval __premarshalupdateVolumeVolumeUpdateVolume

	retval.Id = v.Volume.Id
	retval.Name = v.Volume.Name
	retval.VolumeInstances = v.Volume.VolumeInstances
	return &retval, nil
}

// upsertVariableCollectionResponse is returned by upsertVariableCollection on success.
type upsertVariableCollectionResponse struct {
	// Upserts a collection of variables.
	VariableCollectionUpsert bool `json:"variableCollectionUpsert"`
}

// GetVariableCollectionUpsert returns upsertVariableCollectionResponse.VariableCollectionUpsert, and is useful for accessing the field via an interface.
func (v *upsertVariableCollectionResponse) GetVariableCollectionUpsert() bool {
	return v.VariableCollectionUpsert
}

// upsertVariableResponse is returned by upsertVariable on success.
type upsertVariableResponse struct {
	// Upserts a variable.
	VariableUpsert bool `json:"variableUpsert"`
}

// GetVariableUpsert returns upsertVariableResponse.VariableUpsert, and is useful for accessing the field via an interface.
func (v *upsertVariableResponse) GetVariableUpsert() bool { return v.VariableUpsert }

func connectService(
	ctx context.Context,
	client graphql.Client,
	id string,
	input ServiceConnectInput,
) (*connectServiceResponse, error) {
	req := &graphql.Request{
		OpName: "connectService",
		Query: `
mutation connectService ($id: String!, $input: ServiceConnectInput!) {
	serviceConnect(id: $id, input: $input) {
		... Service
	}
}
fragment Service on Service {
	id
	name
	projectId
}
`,
		Variables: &__connectServiceInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data connectServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createCustomDomain(
	ctx context.Context,
	client graphql.Client,
	input CustomDomainCreateInput,
) (*createCustomDomainResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomDomain",
		Query: `
mutation createCustomDomain ($input: CustomDomainCreateInput!) {
	customDomainCreate(input: $input) {
		... CustomDomain
	}
}
fragment CustomDomain on CustomDomain {
	id
	domain
	status {
		dnsRecords {
			hostlabel
			requiredValue
			zone
		}
	}
	environmentId
	serviceId
	targetPort
}
`,
		Variables: &__createCustomDomainInput{
			Input: input,
		},
	}
	var err error

	var data createCustomDomainResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createDeploymentTrigger(
	ctx context.Context,
	client graphql.Client,
	input DeploymentTriggerCreateInput,
) (*createDeploymentTriggerResponse, error) {
	req := &graphql.Request{
		OpName: "createDeploymentTrigger",
		Query: `
mutation createDeploymentTrigger ($input: DeploymentTriggerCreateInput!) {
	deploymentTriggerCreate(input: $input) {
		... DeploymentTrigger
	}
}
fragment DeploymentTrigger on DeploymentTrigger {
	id
	provider
	repository
	branch
	checkSuites
	projectId
	serviceId
	environmentId
}
`,
		Variables: &__createDeploymentTriggerInput{
			Input: input,
		},
	}
	var err error

	var data createDeploymentTriggerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createEnvironment(
	ctx context.Context,
	client graphql.Client,
	input EnvironmentCreateInput,
) (*createEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "createEnvironment",
		Query: `
mutation createEnvironment ($input: EnvironmentCreateInput!) {
	environmentCreate(input: $input) {
		... Environment
	}
}
fragment Environment on Environment {
	id
	name
	projectId
}
`,
		Variables: &__createEnvironmentInput{
			Input: input,
		},
	}
	var err error

	var data createEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createProject(
	ctx context.Context,
	client graphql.Client,
	input ProjectCreateInput,
) (*createProjectResponse, error) {
	req := &graphql.Request{
		OpName: "createProject",
		Query: `
mutation createProject ($input: ProjectCreateInput!) {
	projectCreate(input: $input) {
		... Project
	}
}
fragment Project on Project {
	id
	name
	description
	isPublic
	prDeploys
	team {
		id
	}
	environments {
		edges {
			node {
				id
				name
				createdAt
			}
		}
	}
}
`,
		Variables: &__createProjectInput{
			Input: input,
		},
	}
	var err error

	var data createProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createService(
	ctx context.Context,
	client graphql.Client,
	input ServiceCreateInput,
) (*createServiceResponse, error) {
	req := &graphql.Request{
		OpName: "createService",
		Query: `
mutation createService ($input: ServiceCreateInput!) {
	serviceCreate(input: $input) {
		... Service
	}
}
fragment Service on Service {
	id
	name
	projectId
}
`,
		Variables: &__createServiceInput{
			Input: input,
		},
	}
	var err error

	var data createServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createServiceDomain(
	ctx context.Context,
	client graphql.Client,
	input ServiceDomainCreateInput,
) (*createServiceDomainResponse, error) {
	req := &graphql.Request{
		OpName: "createServiceDomain",
		Query: `
mutation createServiceDomain ($input: ServiceDomainCreateInput!) {
	serviceDomainCreate(input: $input) {
		... ServiceDomain
	}
}
fragment ServiceDomain on ServiceDomain {
	id
	domain
	suffix
	environmentId
	serviceId
}
`,
		Variables: &__createServiceDomainInput{
			Input: input,
		},
	}
	var err error

	var data createServiceDomainResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createTcpProxy(
	ctx context.Context,
	client graphql.Client,
	input TCPProxyCreateInput,
) (*createTcpProxyResponse, error) {
	req := &graphql.Request{
		OpName: "createTcpProxy",
		Query: `
mutation createTcpProxy ($input: TCPProxyCreateInput!) {
	tcpProxyCreate(input: $input) {
		... TCPProxy
	}
}
fragment TCPProxy on TCPProxy {
	id
	applicationPort
	proxyPort
	domain
	environmentId
	serviceId
}
`,
		Variables: &__createTcpProxyInput{
			Input: input,
		},
	}
	var err error

	var data createTcpProxyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createVolume(
	ctx context.Context,
	client graphql.Client,
	input VolumeCreateInput,
) (*createVolumeResponse, error) {
	req := &graphql.Request{
		OpName: "createVolume",
		Query: `
mutation createVolume ($input: VolumeCreateInput!) {
	volumeCreate(input: $input) {
		... Volume
	}
}
fragment Volume on Volume {
	id
	name
	volumeInstances {
		edges {
			node {
				id
				environmentId
				serviceId
				mountPath
				sizeMB
			}
		}
	}
}
`,
		Variables: &__createVolumeInput{
			Input: input,
		},
	}
	var err error

	var data createVolumeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteCustomDomain(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteCustomDomainResponse, error) {
	req := &graphql.Request{
		OpName: "deleteCustomDomain",
		Query: `
mutation deleteCustomDomain ($id: String!) {
	customDomainDelete(id: $id)
}
`,
		Variables: &__deleteCustomDomainInput{
			Id: id,
		},
	}
	var err error

	var data deleteCustomDomainResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteDeploymentTrigger(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDeploymentTriggerResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDeploymentTrigger",
		Query: `
mutation deleteDeploymentTrigger ($id: String!) {
	deploymentTriggerDelete(id: $id)
}
`,
		Variables: &__deleteDeploymentTriggerInput{
			Id: id,
		},
	}
	var err error

	var data deleteDeploymentTriggerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteEnvironment(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "deleteEnvironment",
		Query: `
mutation deleteEnvironment ($id: String!) {
	environmentDelete(id: $id)
}
`,
		Variables: &__deleteEnvironmentInput{
			Id: id,
		},
	}
	var err error

	var data deleteEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteProject(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteProjectResponse, error) {
	req := &graphql.Request{
		OpName: "deleteProject",
		Query: `
mutation deleteProject ($id: String!) {
	projectDelete(id: $id)
}
`,
		Variables: &__deleteProjectInput{
			Id: id,
		},
	}
	var err error

	var data deleteProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteService(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteServiceResponse, error) {
	req := &graphql.Request{
		OpName: "deleteService",
		Query: `
mutation deleteService ($id: String!) {
	serviceDelete(id: $id)
}
`,
		Variables: &__deleteServiceInput{
			Id: id,
		},
	}
	var err error

	var data deleteServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteServiceDomain(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteServiceDomainResponse, error) {
	req := &graphql.Request{
		OpName: "deleteServiceDomain",
		Query: `
mutation deleteServiceDomain ($id: String!) {
	serviceDomainDelete(id: $id)
}
`,
		Variables: &__deleteServiceDomainInput{
			Id: id,
		},
	}
	var err error

	var data deleteServiceDomainResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteTcpProxy(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteTcpProxyResponse, error) {
	req := &graphql.Request{
		OpName: "deleteTcpProxy",
		Query: `
mutation deleteTcpProxy ($id: String!) {
	tcpProxyDelete(id: $id)
}
`,
		Variables: &__deleteTcpProxyInput{
			Id: id,
		},
	}
	var err error

	var data deleteTcpProxyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteVariable(
	ctx context.Context,
	client graphql.Client,
	input VariableDeleteInput,
) (*deleteVariableResponse, error) {
	req := &graphql.Request{
		OpName: "deleteVariable",
		Query: `
mutation deleteVariable ($input: VariableDeleteInput!) {
	variableDelete(input: $input)
}
`,
		Variables: &__deleteVariableInput{
			Input: input,
		},
	}
	var err error

	var data deleteVariableResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteVolume(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteVolumeResponse, error) {
	req := &graphql.Request{
		OpName: "deleteVolume",
		Query: `
mutation deleteVolume ($id: String!) {
	volumeDelete(volumeId: $id)
}
`,
		Variables: &__deleteVolumeInput{
			Id: id,
		},
	}
	var err error

	var data deleteVolumeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func disconnectService(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*disconnectServiceResponse, error) {
	req := &graphql.Request{
		OpName: "disconnectService",
		Query: `
mutation disconnectService ($id: String!) {
	serviceDisconnect(id: $id) {
		id
	}
}
`,
		Variables: &__disconnectServiceInput{
			Id: id,
		},
	}
	var err error

	var data disconnectServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getCustomDomain(
	ctx context.Context,
	client graphql.Client,
	id string,
	projectId string,
) (*getCustomDomainResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomDomain",
		Query: `
query getCustomDomain ($id: String!, $projectId: String!) {
	customDomain(id: $id, projectId: $projectId) {
		... CustomDomain
	}
}
fragment CustomDomain on CustomDomain {
	id
	domain
	status {
		dnsRecords {
			hostlabel
			requiredValue
			zone
		}
	}
	environmentId
	serviceId
	targetPort
}
`,
		Variables: &__getCustomDomainInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err error

	var data getCustomDomainResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getEnvironment(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "getEnvironment",
		Query: `
query getEnvironment ($id: String!) {
	environment(id: $id) {
		... Environment
	}
}
fragment Environment on Environment {
	id
	name
	projectId
}
`,
		Variables: &__getEnvironmentInput{
			Id: id,
		},
	}
	var err error

	var data getEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getEnvironments(
	ctx context.Context,
	client graphql.Client,
	projectId string,
) (*getEnvironmentsResponse, error) {
	req := &graphql.Request{
		OpName: "getEnvironments",
		Query: `
query getEnvironments ($projectId: String!) {
	environments(projectId: $projectId) {
		edges {
			node {
				... Environment
			}
		}
	}
}
fragment Environment on Environment {
	id
	name
	projectId
}
`,
		Variables: &__getEnvironmentsInput{
			ProjectId: projectId,
		},
	}
	var err error

	var data getEnvironmentsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProject(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getProjectResponse, error) {
	req := &graphql.Request{
		OpName: "getProject",
		Query: `
query getProject ($id: String!) {
	project(id: $id) {
		... Project
	}
}
fragment Project on Project {
	id
	name
	description
	isPublic
	prDeploys
	team {
		id
	}
	environments {
		edges {
			node {
				id
				name
				createdAt
			}
		}
	}
}
`,
		Variables: &__getProjectInput{
			Id: id,
		},
	}
	var err error

	var data getProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getService(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getServiceResponse, error) {
	req := &graphql.Request{
		OpName: "getService",
		Query: `
query getService ($id: String!) {
	service(id: $id) {
		... Service
	}
}
fragment Service on Service {
	id
	name
	projectId
}
`,
		Variables: &__getServiceInput{
			Id: id,
		},
	}
	var err error

	var data getServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getServiceInstance(
	ctx context.Context,
	client graphql.Client,
	environmentId string,
	serviceId string,
) (*getServiceInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "getServiceInstance",
		Query: `
query getServiceInstance ($environmentId: String!, $serviceId: String!) {
	serviceInstance(environmentId: $environmentId, serviceId: $serviceId) {
		source {
			image
			repo
		}
		rootDirectory
		railwayConfigFile
		cronSchedule
		region
		numReplicas
	}
}
`,
		Variables: &__getServiceInstanceInput{
			EnvironmentId: environmentId,
			ServiceId:     serviceId,
		},
	}
	var err error

	var data getServiceInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getSharedVariables(
	ctx context.Context,
	client graphql.Client,
	projectId string,
	environmentId string,
) (*getSharedVariablesResponse, error) {
	req := &graphql.Request{
		OpName: "getSharedVariables",
		Query: `
query getSharedVariables ($projectId: String!, $environmentId: String!) {
	variables(environmentId: $environmentId, projectId: $projectId, unrendered: true)
}
`,
		Variables: &__getSharedVariablesInput{
			ProjectId:     projectId,
			EnvironmentId: environmentId,
		},
	}
	var err error

	var data getSharedVariablesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getTcpProxy(
	ctx context.Context,
	client graphql.Client,
	environmentId string,
	serviceId string,
) (*getTcpProxyResponse, error) {
	req := &graphql.Request{
		OpName: "getTcpProxy",
		Query: `
query getTcpProxy ($environmentId: String!, $serviceId: String!) {
	tcpProxies(environmentId: $environmentId, serviceId: $serviceId) {
		... TCPProxy
	}
}
fragment TCPProxy on TCPProxy {
	id
	applicationPort
	proxyPort
	domain
	environmentId
	serviceId
}
`,
		Variables: &__getTcpProxyInput{
			EnvironmentId: environmentId,
			ServiceId:     serviceId,
		},
	}
	var err error

	var data getTcpProxyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getVariables(
	ctx context.Context,
	client graphql.Client,
	projectId string,
	environmentId string,
	serviceId string,
) (*getVariablesResponse, error) {
	req := &graphql.Request{
		OpName: "getVariables",
		Query: `
query getVariables ($projectId: String!, $environmentId: String!, $serviceId: String!) {
	variables(environmentId: $environmentId, projectId: $projectId, serviceId: $serviceId, unrendered: true)
}
`,
		Variables: &__getVariablesInput{
			ProjectId:     projectId,
			EnvironmentId: environmentId,
			ServiceId:     serviceId,
		},
	}
	var err error

	var data getVariablesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getVolumeInstances(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getVolumeInstancesResponse, error) {
	req := &graphql.Request{
		OpName: "getVolumeInstances",
		Query: `
query getVolumeInstances ($id: String!) {
	project(id: $id) {
		volumes {
			edges {
				node {
					... Volume
				}
			}
		}
	}
}
fragment Volume on Volume {
	id
	name
	volumeInstances {
		edges {
			node {
				id
				environmentId
				serviceId
				mountPath
				sizeMB
			}
		}
	}
}
`,
		Variables: &__getVolumeInstancesInput{
			Id: id,
		},
	}
	var err error

	var data getVolumeInstancesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func listDeploymentTriggers(
	ctx context.Context,
	client graphql.Client,
	projectId string,
	environmentId string,
	serviceId string,
) (*listDeploymentTriggersResponse, error) {
	req := &graphql.Request{
		OpName: "listDeploymentTriggers",
		Query: `
query listDeploymentTriggers ($projectId: String!, $environmentId: String!, $serviceId: String!) {
	deploymentTriggers(environmentId: $environmentId, projectId: $projectId, serviceId: $serviceId) {
		edges {
			node {
				... DeploymentTrigger
			}
		}
	}
}
fragment DeploymentTrigger on DeploymentTrigger {
	id
	provider
	repository
	branch
	checkSuites
	projectId
	serviceId
	environmentId
}
`,
		Variables: &__listDeploymentTriggersInput{
			ProjectId:     projectId,
			EnvironmentId: environmentId,
			ServiceId:     serviceId,
		},
	}
	var err error

	var data listDeploymentTriggersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func listServiceDomains(
	ctx context.Context,
	client graphql.Client,
	environmentId string,
	serviceId string,
	projectId string,
) (*listServiceDomainsResponse, error) {
	req := &graphql.Request{
		OpName: "listServiceDomains",
		Query: `
query listServiceDomains ($environmentId: String!, $serviceId: String!, $projectId: String!) {
	domains(environmentId: $environmentId, serviceId: $serviceId, projectId: $projectId) {
		serviceDomains {
			... ServiceDomain
		}
	}
}
fragment ServiceDomain on ServiceDomain {
	id
	domain
	suffix
	environmentId
	serviceId
}
`,
		Variables: &__listServiceDomainsInput{
			EnvironmentId: environmentId,
			ServiceId:     serviceId,
			ProjectId:     projectId,
		},
	}
	var err error

	var data listServiceDomainsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func redeployServiceInstance(
	ctx context.Context,
	client graphql.Client,
	environmentId string,
	serviceId string,
) (*redeployServiceInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "redeployServiceInstance",
		Query: `
mutation redeployServiceInstance ($environmentId: String!, $serviceId: String!) {
	serviceInstanceRedeploy(environmentId: $environmentId, serviceId: $serviceId)
}
`,
		Variables: &__redeployServiceInstanceInput{
			EnvironmentId: environmentId,
			ServiceId:     serviceId,
		},
	}
	var err error

	var data redeployServiceInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateDeploymentTrigger(
	ctx context.Context,
	client graphql.Client,
	id string,
	input DeploymentTriggerUpdateInput,
) (*updateDeploymentTriggerResponse, error) {
	req := &graphql.Request{
		OpName: "updateDeploymentTrigger",
		Query: `
mutation updateDeploymentTrigger ($id: String!, $input: DeploymentTriggerUpdateInput!) {
	deploymentTriggerUpdate(id: $id, input: $input) {
		... DeploymentTrigger
	}
}
fragment DeploymentTrigger on DeploymentTrigger {
	id
	provider
	repository
	branch
	checkSuites
	projectId
	serviceId
	environmentId
}
`,
		Variables: &__updateDeploymentTriggerInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateDeploymentTriggerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateProject(
	ctx context.Context,
	client graphql.Client,
	id string,
	input ProjectUpdateInput,
) (*updateProjectResponse, error) {
	req := &graphql.Request{
		OpName: "updateProject",
		Query: `
mutation updateProject ($id: String!, $input: ProjectUpdateInput!) {
	projectUpdate(id: $id, input: $input) {
		... Project
	}
}
fragment Project on Project {
	id
	name
	description
	isPublic
	prDeploys
	team {
		id
	}
	environments {
		edges {
			node {
				id
				name
				createdAt
			}
		}
	}
}
`,
		Variables: &__updateProjectInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateService(
	ctx context.Context,
	client graphql.Client,
	id string,
	input ServiceUpdateInput,
) (*updateServiceResponse, error) {
	req := &graphql.Request{
		OpName: "updateService",
		Query: `
mutation updateService ($id: String!, $input: ServiceUpdateInput!) {
	serviceUpdate(id: $id, input: $input) {
		... Service
	}
}
fragment Service on Service {
	id
	name
	projectId
}
`,
		Variables: &__updateServiceInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateServiceDomain(
	ctx context.Context,
	client graphql.Client,
	input ServiceDomainUpdateInput,
) (*updateServiceDomainResponse, error) {
	req := &graphql.Request{
		OpName: "updateServiceDomain",
		Query: `
mutation updateServiceDomain ($input: ServiceDomainUpdateInput!) {
	serviceDomainUpdate(input: $input)
}
`,
		Variables: &__updateServiceDomainInput{
			Input: input,
		},
	}
	var err error

	var data updateServiceDomainResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateServiceInstance(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
	input ServiceInstanceUpdateInput,
) (*updateServiceInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "updateServiceInstance",
		Query: `
mutation updateServiceInstance ($serviceId: String!, $input: ServiceInstanceUpdateInput!) {
	serviceInstanceUpdate(environmentId: null, input: $input, serviceId: $serviceId)
}
`,
		Variables: &__updateServiceInstanceInput{
			ServiceId: serviceId,
			Input:     input,
		},
	}
	var err error

	var data updateServiceInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateVolume(
	ctx context.Context,
	client graphql.Client,
	id string,
	input VolumeUpdateInput,
) (*updateVolumeResponse, error) {
	req := &graphql.Request{
		OpName: "updateVolume",
		Query: `
mutation updateVolume ($id: String!, $input: VolumeUpdateInput!) {
	volumeUpdate(volumeId: $id, input: $input) {
		... Volume
	}
}
fragment Volume on Volume {
	id
	name
	volumeInstances {
		edges {
			node {
				id
				environmentId
				serviceId
				mountPath
				sizeMB
			}
		}
	}
}
`,
		Variables: &__updateVolumeInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateVolumeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateVolumeInstance(
	ctx context.Context,
	client graphql.Client,
	id string,
	input VolumeInstanceUpdateInput,
) (*updateVolumeInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "updateVolumeInstance",
		Query: `
mutation updateVolumeInstance ($id: String!, $input: VolumeInstanceUpdateInput!) {
	volumeInstanceUpdate(volumeId: $id, environmentId: null, input: $input)
}
`,
		Variables: &__updateVolumeInstanceInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateVolumeInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func upsertVariable(
	ctx context.Context,
	client graphql.Client,
	input VariableUpsertInput,
) (*upsertVariableResponse, error) {
	req := &graphql.Request{
		OpName: "upsertVariable",
		Query: `
mutation upsertVariable ($input: VariableUpsertInput!) {
	variableUpsert(input: $input)
}
`,
		Variables: &__upsertVariableInput{
			Input: input,
		},
	}
	var err error

	var data upsertVariableResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func upsertVariableCollection(
	ctx context.Context,
	client graphql.Client,
	input VariableCollectionUpsertInput,
) (*upsertVariableCollectionResponse, error) {
	req := &graphql.Request{
		OpName: "upsertVariableCollection",
		Query: `
mutation upsertVariableCollection ($input: VariableCollectionUpsertInput!) {
	variableCollectionUpsert(input: $input)
}
`,
		Variables: &__upsertVariableCollectionInput{
			Input: input,
		},
	}
	var err error

	var data upsertVariableCollectionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
